<?php
// $Id: panels_page.module,v 1.1.2.7 2007/04/03 18:30:11 merlinofchaos Exp $

/**
 * Implementation of hook_help()
 */
function panels_page_help($section = '') {
  switch ($section) {
    case 'admin/build/panel-page':
    case 'admin/build/panel-page/list':
      return t('<p>You may peruse a list of your current panels layouts and edit them, or click add to create a new page.</p>');
    case 'admin/build/panel-page/add':
      return t('<p>Choose a layout for your new page from the list below.</p>');
  }
}

/**
 * Implementation of hook_perm()
 */
function panels_page_perm() {
  return array('create panel-pages', 'access all panel-pages');
}

/**
 * Implementation of hook_menu()
 */
function panels_page_menu($may_cache) {
  if ($may_cache) {
    $access = user_access('create panel-pages');
    $items[] = array(
      'path' => 'admin/build/panel-page',
      'title' => t('Panel pages'),
      'access' => $access,    
      'callback' => 'panels_page_list_page',
      'description' => t('Create and administer panel-pages (complex layout pages with URLs)'),
    );
    $items[] = array(
      'path' => 'admin/build/panel-page/list',
      'title' => t('List'),
      'access' => $access,    
      'callback' => 'panels_page_list_page',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panel-page/add',
      'title' => t('Add'),
      'access' => $access,    
      'callback' => 'panels_page_add_page',
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panel-page/settings',
      'title' => t('Settings'),
      'access' => $access,    
      'callback' => 'drupal_get_form',
      'callback arguments' => array('panels_page_settings'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panel-page/add/layout',
      'title' => t('Add'),
      'access' => $access,    
      'callback' => 'panels_page_add_layout_page',
      'type' => MENU_LOCAL_TASK,
    );

    // load panels from database
    $result = db_query("SELECT * FROM {panels_page}");
    // FIXME: Fow now we're making these all callbacks, but we
    // should steal code from Views so they can be normal, tabs,
    // etc
    while ($panel_page = db_fetch_object($result)) {
      $item = array(
        'path' => $panel_page->path,
        'title' => filter_xss_admin($panel_page->title),
        'access' => panels_page_access($panel_page),
        'callback' => 'panels_page_view_page',
        'callback arguments' => array($panel_page->pid),
        'type' => MENU_CALLBACK
      );
      $items[] = $item;
    }
  }
  else {
    if (arg(0) == 'admin' &&
        arg(1) == 'build' &&
        arg(2) == 'panel-page' &&
        is_numeric(arg(3))) {
      $page = panels_page_load(arg(3));
      if ($page) {
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3),
          'title' => t('View'),
          'access' => $access,    
          'callback' => 'panels_page_view_page',
          'callback arguments' => array(arg(3)),
          'weight' => -10,
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/view',
          'title' => t('View'),
          'access' => $access,    
          'callback' => 'panels_page_view_page',
          'callback arguments' => array(arg(3)),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/edit',
          'title' => t('Edit'),
          'access' => $access,    
          'callback' => 'panels_page_edit',
          'callback arguments' => array($page),
          'weight' => -5,
          'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/edit/general',
          'title' => t('General'),
          'access' => $access,    
          'callback' => 'panels_page_edit',
          'callback arguments' => array($page),
          'weight' => -5,
          'type' => MENU_DEFAULT_LOCAL_TASK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/edit/layout',
          'title' => t('Layout'),
          'access' => $access,    
          'callback' => 'panels_page_edit_layout',
          'callback arguments' => array($page),
          'weight' => -3,
          'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/edit/content',
          'title' => t('Content'),
          'access' => $access,    
          'callback' => 'panels_page_edit_content',
          'callback arguments' => array($page),
          'weight' => -1,
          'type' => MENU_LOCAL_TASK,
        );
        $items[] = array(
          'path' => 'admin/build/panel-page/' . arg(3) . '/delete',
          'title' => t('Delete panel page'),
          'access' => $access,    
          'callback' => 'drupal_get_form',
          'callback arguments' => array('panels_page_delete_confirm', $page),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }
  return $items;
}

/**
 * Determine if the specified user has access to a panel.
 */
function panels_page_access($panel_page, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  // Administrator privileges
  if (user_access('access all panel-pages', $account)) {
    return TRUE;
  }

  // All views with an empty access setting are available to all roles.
  if (!$panel_page->access || !is_array($panel_page->access)) { 
    return TRUE;
  }

  // Otherwise, check roles
  static $roles = array();
  if (!isset($roles[$account->uid])) {
    $roles[$account->uid] = array_keys($account->roles);
    $roles[$account->uid][] = $account->uid ? DRUPAL_AUTHENTICATED_RID : DRUPAL_ANONYMOUS_RID;
  }

  return array_intersect($panel_page->access, $roles[$account->uid]);
}

// ---------------------------------------------------------------------------
// panel page administrative pages

/**
 * Settings for panel pages
 */
function panels_page_settings() {
  $content_types = panels_get_content_types();
  $default_types = variable_get('panels_page_default', NULL);
  if (!isset($default_types)) {
    $default_types = array('block' => TRUE, 'views' => TRUE, 'other' => TRUE);
    $skip = TRUE;
  }

  foreach ($content_types as $id => $info) {
    if (empty($info['single'])) {
      $default_options[$id] = t('New @s', array('@s' => $info['title']));
    }
  }

  $default_options['other'] = t('New content of other types');
  $form['panels_page_default'] = array(
    '#type' => 'checkboxes',
    '#title' => t('New content behavior'),
    '#description' => t('Select the default behavior of new content added to the system. If checked, new content will automatically be immediately available to be added to Panels pages. If not checked, new content will not be available until specifically allowed here.'),
    '#options' => $default_options,
    '#default_value' => array_keys(array_filter($default_types)),
  );
  
  if ($skip) {
    $form['markup'] = array('#value' => t('<p>Click Submit to be presented with a complete list of available content types set to the defaults you selected.</p>'));
    $form['skip'] = array('#type' => 'value', '#value' => TRUE);
  }
  else {
    // Rebuild the entire list, setting appropriately from defaults. Give
    // each type its own checkboxes set unless it's 'single' in which
    // case it can go into our fake other set.
    $available_content_types = panels_get_available_content_types();
    $allowed_content_types = variable_get('panels_page_allowed_types', array());
    
    foreach ($available_content_types as $id => $types) {
      foreach ($types as $type => $info) {
        $key = $id . '-' . $type;
        $checkboxes = empty($content_types[$id]['single']) ? $id : 'other';
        $options[$checkboxes][$key] = $info['title'];
        if (!isset($allowed_content_types[$key])) {
          $allowed[$checkboxes][$key] = isset($default_types[$id]) ? $default_types[$id] : $default_types['other'];
        }
        else {
          $allowed[$checkboxes][$key] = $allowed_content_types[$key];
        }
      }
    }

    $form['content_types'] = array('#tree' => TRUE);
    // cheat a bit
    $content_types['other'] = array('title' => t('Other'), 'weight' => 10);
    foreach ($content_types as $id => $info) {
      if (isset($allowed[$id])) {
        $form['content_types'][$id] = array(
          '#prefix' => '<div class="panels-page-type-container">',
          '#suffix' => '</div>',
          '#type' => 'checkboxes',
          '#title' => t('Allowed @s content', array('@s' => $info['title'])),
          '#options' => $options[$id],
          '#default_value' => array_keys(array_filter($allowed[$id])),
        );
      }
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  drupal_add_css(drupal_get_path('module', 'panels_page') . '/css/panels_page.css');
  return $form;
}

function panels_page_settings_submit($form_id, $form_values) {
  variable_set('panels_page_default', $form_values['panels_page_default']);
  if (!$form_values['skip']) {
    // merge the broken apart array neatly back together
    variable_set('panels_page_allowed_types', call_user_func_array('array_merge', $form_values['content_types']));
  }
  drupal_set_message(t('Your changes have been saved.'));
}

/**
 * Provide a list of panels, with links to edit or delete them.
 */
function panels_page_list_page() {
  $layouts = panels_get_layouts();
  $result = db_query("SELECT p.*, d.layout FROM {panels_page} p INNER JOIN {panels_display} d ON p.did = d.did ORDER BY p.title");
  while ($panel_page = db_fetch_object($result)) {
    $item = array();
    $item[] = check_plain($panel_page->title ? $panel_page->title : t('No title'));
    $item[] = check_plain($layouts[$panel_page->layout]['title']);
    $item[] = l($panel_page->path, $panel_page->path);
    $item[] = implode(' | ', array(
      l(t('Edit'), "admin/build/panel-page/$panel_page->pid/edit"),
      l(t('Delete'), "admin/build/panel-page/$panel_page->pid/delete"),
    ));
    $items[] = $item;
  }
  $header = array(
    t('Page title'),
    t('Layout'),
    t('URL'),
    t('Operations'),
  );
  $output = theme('table', $header, $items);
  return $output;
}

/*
 * Provide a form to confirm deletion of a panel page.
 */
function panels_page_delete_confirm($panel_page) {
  $form['pid'] = array('#type' => 'value', '#value' => $panel_page->pid);
  $form['did'] = array('#type' => 'value', '#value' => $panel_page->did);
  return confirm_form( $form,
    t('Are you sure you want to delete "@title"?', array('@title' => $panel_page->title)),
    $_GET['destination'] ? $_GET['destination'] : 'admin/build/panel-page',
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/*
 * Handle the submit button to delete a panel page.
 */
function panels_page_delete_confirm_submit($formid, $form) {
  if ($form['confirm']) {
    panels_page_delete((object) $form);
    // TODO: Is this necessary or did we feed it the location already?
    return 'admin/build/panel-page';
  }
}

/**
 * Handle the add panel-page page
 */
function panels_page_add_page($layout = NULL) {
  $layouts = panels_get_layouts();

  if ($layout === NULL) {
    foreach ($layouts as $id => $layout) {
      $output .= panels_print_layout_link($id, $layout, $_GET['q'] . '/' . $id);
    }
    return $output;
  }

  if (!$layouts[$layout]) {
    return drupal_not_found();
  }

  $panel_page->display->did = 'new';
  $panel_page->display->layout = $layout;
  $panel_page->pid = 'new';
  $panel_page->did = 'new';
  return panels_page_edit($panel_page);
}


/**
 * Edit a panel page. Called from both the add and edit points to provide
 * for common flow.
 */
function panels_page_edit($panel_page) {
  return drupal_get_form('panels_page_edit_form', $panel_page);
}

/**
 * The form to edit the page portion of a panel.
 */
function panels_page_edit_form($panel_page) {
  drupal_add_css(panels_get_path('css/panels_admin.css'));
  $layout = panels_get_layouts($panel_page->display->layout);

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $panel_page->pid,
  );

  $form['panel_page'] = array(
    '#type' => 'value', 
    '#value' => $panel_page
  );

  $form['layout'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="layout-container">',
    '#suffix' => '</div>',
    '#title' => t('Layout'),
  );

  $form['info'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="panel-page-info-container">',
    '#suffix' => '</div>',
    '#title' => t('Page settings'),
  );

  $form['layout'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="layout-container">',
    '#suffix' => '</div>',
    '#title' => t('Layout'),
  );

  $form['layout']['layout-icon'] = array(
    '#value' => panels_print_layout_icon($panel_page->display->layout, $layout),
  );

  $form['layout']['layout-display'] = array(
    '#type' => 'textfield',
    '#disabled' => true,
    '#size' => 40,
    '#value' => $layout['title'],
  );
  $content = '<dl class="content-list">';
  
  foreach ($layout['panels'] as $panel_id => $title) {
    $content .= "<dt>$title</dt><dd>";
    if ($panel_page->display->panels[$panel_id]) {
      $content .= '<ol>';
      foreach ($panel_page->display->panels[$panel_id] as $pid) {
        $content .= '<li>' . panels_get_pane_title($panel_page->display->content[$pid]) . '</li>';
      }
      $content .= '</ol>';
    }
    else {
      $content .= t('Empty');      
    }
    $content .= '</dd>';
  }
  $content .= '</dl>';

  $form['layout']['layout-content'] = array(
    '#value' => $content,
  );

  $form['info']['title'] = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => $panel_page->title,
    '#title' => t('Page title'),
    '#description' => t('The page title for this panels layout'),
  );

  $form['info']['css_id'] = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => $panel_page->css_id,
    '#title' => t('CSS ID'),
    '#description' => t('The CSS ID to apply to this page'),
  );

  $form['info']['path'] = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => $panel_page->path,
    '#title' => t('Path'),
    '#description' => t('The URL path to give this page, i.e, path/to/page'),
    '#required' => TRUE,
  );

  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = $obj->name;
  }

  $form['info']['access'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Access'),
    '#default_value' => $panel_page->access,
    '#options' => $rids,
    '#description' => t('Only the checked roles will be able to see this panel in any form; if no roles are checked, access will not be restricted.'),
  );

  $label = ($panel_page->pid == 'new') ? t('Next') : t('Save');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
  );  

  return $form;
}

/**
 * Validate a panel page edit form
 */
function panels_page_edit_form_validate($form_id, $form_values, $form) {
  if (!$form_values['path']) {
    form_error($form['info']['path'], t('Path is required.'));
  }
  else {
    $result = db_result(db_query("SELECT pid FROM {panels_page} WHERE path = '%s' AND pid <> %d", $form_values['path'], $form_values['pid']));
    if ($result) {
      form_error($form['info']['path'], t('Path may not be the same as another panel page path.'));
    }
  }
}

/**
 * Process submission of the panel page edit form
 */
function panels_page_edit_form_submit($form_id, $form_values) {
  $panel_page = $form_values['panel_page'];

  $panel_page->title  = $form_values['title'];
  $panel_page->css_id = $form_values['css_id'];
  $panel_page->path  = $form_values['path'];
  $panel_page->access = array_keys(array_filter($form_values['access']));

  if ($panel_page->pid == 'new') {
    panels_page_save($panel_page);
    $GLOBALS['form_values']['pid'] = $panel_page->pid;
    return "admin/build/panel-page/$panel_page->pid/content";
  }
  else {
    drupal_set_message(t('Your changes have been saved.'));
    panels_page_save($panel_page);
    return "admin/build/panel-page/$panel_page->pid/edit/content";
  }
}

/**
 * Pass through to the panels layout editor.
 */
function panels_page_edit_layout($panel_page) {
  return panels_edit_layout($panel_page->display, t('Save'), "admin/build/panel-page/$panel_page->pid/edit");
}

/**
 * Pass through to the panels content editor.
 */
function panels_page_edit_content($panel_page) {
  $content_types = panels_get_available_content_types();
  $default_types = variable_get('panels_page_defaults', array());
  $allowed_types = variable_get('panels_page_allowed_types', array());

  // By default, if they haven't gone and done the initial setup here,
  // let all 'other' types (which will be all types) be available.
  if (!isset($default_types['other'])) {
    $default_types['other'] = TRUE;
  }
  foreach ($content_types as $id => $types) {
    foreach ($types as $type => $info) {
      $key = $id . '-' . $type;
      if (!isset($allowed_types[$key])) {
        $allowed_types[$key] = isset($default_types[$id]) ? $default_types[$id] : $default_types['other'];
      }
      if (!$allowed_types[$key]) {
        unset($content_types[$id][$type]);
      }
    }
  }
  return panels_edit($panel_page->display, "admin/build/panel-page/$panel_page->pid/edit", $content_types);
}

// ---------------------------------------------------------------------------
// view panels page

function panels_page_view_page($pid) {
  $panel_page = panels_page_load($pid);
  if (!$panel_page) {
    return drupal_not_found();
  }
  
  $output = panels_render_display($panel_page->display, $panel_page->css_id);
  // set title afterward to ensure title is retained.
  if ($output == NULL) {
    watchdog('panels', t('Unable to find requested layout %s', array('%s' => check_plain($panel_page->display->layout))));
    return drupal_not_found();
  }

  drupal_set_title(filter_xss_admin($panel_page->title));
  return $output;
}

// ---------------------------------------------------------------------------
// Database functions

/**
 * Load a panel page and its associated display
 */
function panels_page_load($pid) {
  $panel_page = db_fetch_object(db_query("SELECT * FROM {panels_page} WHERE pid = %d", $pid));
  if (!$panel_page) {
    return;
  }

  $panels->access = ($panels->access ? explode(', ', $panels->access) : array());

  $panel_page->display = panels_load_display($panel_page->did);
  return $panel_page;
}

/**
 * Save a panel page. 
 */
function panels_page_save(&$panel_page) {
  $display = panels_save_display($panel_page->display);
  $panel_page->access = implode(', ', $panel_page->access);

  if ($panel_page->pid && $panel_page->pid != 'new') {
    db_query(
      "UPDATE {panels_page} SET " .
      "title = '%s', " .
      "access = '%s', " .
      "path = '%s', " .
      "css_id = '%s' " .
      "WHERE pid = %d", 
        $panel_page->title, 
        $panel_page->access, 
        $panel_page->path, 
        $panel_page->css_id, 
      $panel_page->pid
    );
  }
  else {
    $panel_page->pid = db_next_id("{panels_page}_pid");
    // Yes, this is kind of long but it's a lot easier to match up values.
    db_query(
      "INSERT INTO {panels_page} ( " .
        "pid, " .
        "title, " .
        "access, " .
        "path, " .
        "css_id, " .
        "did " .
      ") " .
      "VALUES (" .
        "%d, " .
        "'%s', " .
        "'%s', " .
        "'%s', " .
        "'%s', " .
        "%d " .
      ")",
        $panel_page->pid, 
        $panel_page->title, 
        $panel_page->access, 
        $panel_page->path, 
        $panel_page->css_id, 
        $display->did
    );
  }
  return $panel_page->pid;
}

/**
 * Delete a panel page and its associated display.
 */
function panels_page_delete($panel_page) {
  db_query("DELETE FROM {panels_page} WHERE pid = %d", $panel_page->pid);
  return panels_delete_display($panel_page->did);
}
