<?php
// $Id: panels.module,v 1.10.4.1 2006/12/10 06:55:57 merlinofchaos Exp $

include_once drupal_get_path('module', 'panels') . "/panel_builder.inc";
/**
 * Implementation of hook_help()
 */
function panels_help($section = '') {
  switch ($section) {
    case 'admin/build/panels':
    case 'admin/build/panels/list':
      return t('<p>You may peruse a list of your current panels layouts and edit them, or click add to create a new page.</p>');
    case 'admin/build/panels/add':
      return t('<p>Choose a layout for your new page from the list below.</p>');
  }
}

/**
 * Implementation of hook_perm()
 */
function panels_perm() {
  return array('create panels');
}

/**
 * Implementation of hook_menu()
 */
function panels_menu($may_cache) {
  if ($may_cache) {
    $access = user_access('create panels');
    $items[] = array(
      'path' => 'admin/build/panels',
      'title' => t('Panels'),
      'access' => $access,    
      'callback' => 'panels_list_page',
      'description' => t('Create pages on your site that are 2 or 3 columns'),
    );
    $items[] = array(
      'path' => 'admin/build/panels/list',
      'title' => t('List'),
      'access' => $access,    
      'callback' => 'panels_list_page',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panels/add',
      'title' => t('Add'),
      'access' => $access,    
      'callback' => 'panels_add_page',
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panels/add/layout',
      'title' => t('Add'),
      'access' => $access,    
      'callback' => 'panels_add_layout_page',
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/panels/edit',
      'title' => t('Edit panels'),
      'access' => $access,    
      'callback' => 'panels_edit_page',
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/build/panels/delete',
      'title' => t('Delete panels'),
      'access' => $access,    
      'callback' => 'drupal_get_form',
      'callback arguments' => array('panels_delete_confirm'),
      'type' => MENU_CALLBACK,
    );

    /**
     * needs to be with the layout piece that requires it.
     * farm out menu items to layouts.
     */
    $items[] = array(
      'path' => 'panels/node/autocomplete',
      'title' => t('Autocomplete node'),
      'callback' => 'panels_node_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );

    // load panels from database
    $result = db_query("SELECT * FROM {panels_info}");
    // FIXME: Fow now we're making these all callbacks, but we
    // should steal code from Views so they can be normal, tabs,
    // etc
    while ($panels = db_fetch_object($result)) {
      $items[] = array(
        'path' => $panels->path,
        'title' => $panels->title,
        'access' => panels_access(unserialize($panels->access)),
        'callback' => 'panels_panels_page',
        'callback arguments' => array($panels->did),
        'type' => MENU_CALLBACK
      );
    }
  }
  return $items;
}

/**
 * Determine whether or not the current user has access to this
 * panels.
 */
function panels_access($access) {
  // for now
  return TRUE;
}

// ---------------------------------------------------------------------------
// panels administrative pages

/**
 * Provide a list of panels, with links to edit or delete them.
 */
function panels_list_page() {
  $result = db_query("SELECT * FROM {panels_info} ORDER BY title");
  while ($panels = db_fetch_object($result)) {
    $item = array();
    $item[] = check_plain($panels->title);
    $item[] = l($panels->path, $panels->path);
    $item[] = implode(' | ', array(
      l(t('Edit'), "admin/build/panels/edit/$panels->did"),
      l(t('Delete'), "admin/build/panels/delete/$panels->did"),
    ));
    $items[] = $item;
  }
  $header = array(
    t('Panel title'),
    t('URL'),
    t('Operations'),
  );
  $output = theme('table', $header, $items);
  return $output;
}

/*
 * Provide a form to confirm deletion of a panel page.
 */
function panels_delete_confirm($did = '') {
  $panels = panels_load_panel($did);

  if (!$panels) {
    drupal_goto('admin/build/panels');
  }

  $form['did'] = array('#type' => 'value', '#value' => $panels->did);
  return confirm_form( $form,
    t('Are you sure you want to delete %title?', array('%title' => $panels->title)),
    $_GET['destination'] ? $_GET['destination'] : 'admin/build/panels',
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/*
 * Handle the submit button to delete a panel page.
 */
function panels_delete_confirm_submit($formid, $form) {
  if ($form['confirm']) {
    panels_delete_panels((object) $form);
    drupal_goto('admin/build/panels');
  }
}

/**
 * Handle the add panels page
 */
function panels_add_page($layout = NULL) {
  $layouts = panels_get_layouts();
  drupal_add_css(drupal_get_path('module', 'panels') . '/panels_admin.css');
  if (!$layout) {
    foreach ($layouts as $id => $layout) {
      if (!$default_id) {
        // grab the first one for our default.
        $default_id = $id;
      }
      $file = panels_get_file_path($layout['module'], $layout['icon'], false);
      $output .= theme('panels_add_image', $layout[title], $id, l(theme('image', $file), $_GET['q'] . '/' . $id, NULL, NULL, NULL, NULL, TRUE));
    }
    return $output;
  }

  if (!$layouts[$layout]) {
    return drupal_not_found();
  }

  $panels->layout = $layout;
  return drupal_get_form('panels_edit_form', $panels);
}

function theme_panels_add_image($title, $id, $image) {
  $output .= '<div class="layout-link">';
  $output .= $image;
  $output .= '<div>' . l($title, $_GET['q'] . '/' . $id) . '</div>';
  $output .= '</div>';
  return $output;
}
// ---------------------------------------------------------------------------
// panels administrative pages

function panels_edit_page($did = NULL) {
  if (!$did || !($panels = panels_load_panel($did))) {
    return drupal_not_found();
  }
  return drupal_get_form('panels_edit_form', $panels);
}

// ---------------------------------------------------------------------------
// panels page

function panels_panels_page($did) {
  $panels = panels_load_panel($did);
  if (!$panels) {
    return drupal_not_found();
  }

  $layouts = panels_get_layouts();
  $layout = $layouts[$panels->layout];
  $layout['css_id'] = $panels->css_id;
  
  if (!$layout) {
    watchdog('panels', t('Unable to find requested layout %s', array('%s' => check_plain($panels->layout))));
    return drupal_not_found();
  }

  $content_types = panels_get_content_types();

  foreach ($panels->content as $location => $list) {
    foreach ($list as $area) {
      $function = $content_types[$area->type]['callback'];
      if (function_exists($function)) {
        $content[$area->area] .= theme('panel_view', $function($area->configuration));
      }
    }
  }
  $output = panels_get_layout($layout, $content);
  return $output;
}

/**
 * Helper function for autocompletion of node titles.
 * This is mostly stolen from clipper.
 */
function panels_node_autocomplete($string) {
  if ($string != '') { // if there are node_types passed, we'll use those in a MySQL IN query.
    $result = db_query_range(db_rewrite_sql('SELECT n.title, u.name FROM {node} n INNER JOIN {users} u ON u.uid = n.uid WHERE LOWER(title) LIKE LOWER("%%%s%%")'), $string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    $matches = array();
    while ($node = db_fetch_object($result)) {
      $n = $node->title;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (preg_match('/,/', $node->title) || preg_match('/"/', $node->title)) {
        $n = '"'. preg_replace('/"/', '""', $node->title) .'"';
      }
      $matches[$prefix . $n] = '<span class="autocomplete_title">'. check_plain($node->title) .'</span> <span class="autocomplete_user">('. t('by %user', array('%user' => check_plain($node->name))) .')</span>';
    }
    print drupal_to_js($matches);
    exit();
  }
}
