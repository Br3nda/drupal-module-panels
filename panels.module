<?php
// $Id: panels.module,v 1.10.4.3 2007/01/16 05:07:14 merlinofchaos Exp $

function panels_help($section = NULL) {
  
}
    /**
     * FIXME: needs to be with the layout piece that requires it.
     * farm out menu items to layouts.
     */
function panels_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'panels/node/autocomplete',
      'title' => t('Autocomplete node'),
      'callback' => 'panels_node_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );

    $items[] = array(
      'path' => 'panels/ajax',
      'title' => t('ajax'),
      'callback' => 'panels_ajax',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );
  }
  return $items;
}

/**
 * panels path helper function
 */
function panels_get_path($file, $base_path = false, $module = 'panels') {
  if ($base_path) {
    $output = base_path();
  }
  return $output . drupal_get_path('module', $module) . '/' . $file;
}

// ---------------------------------------------------------------------------
// panels custom image button

/**
 * Custom form element to do our nice images.
 */
function panels_elements() {
  $type['panels_imagebutton'] = array('#input' => TRUE, '#button_type' => 'submit',);
  return $type;
}

/**
 * Theme our image button.
 */
function theme_panels_imagebutton($element) {
  return '<input type="image" ' . 
    'class="form-' . $element['#button_type'] . ' ' . $element['#class'] . '" ' . 
    'name="'. $element['#name'] .'" ' .
    'value="'. check_plain($element['#default_value']) .'" ' . 
    'id="' . $element['#id'] . '" ' .
    drupal_attributes($element['#attributes']) . 
    ' src="' . $element['#image'] . '" ' .
    'alt="' . $element['#title'] . '" ' .
    'title="' . $element['#title'] . '" ' .
    "/>\n";
}

function panels_imagebutton_value() {
  // null function guarantees default_value doesn't get moved to #value.
}

/**
 * Add a single button to a form.
 */
function panels_add_button($image, $name, $text, $class) {
  return array(
    '#type' => 'panels_imagebutton',
    '#image' => panels_get_path('images/' . $image, true),
    '#title' => $text,
    '#default_value' => $name,
    '#class' => $class,
  );
}

/**
 * Set a button to a blank image -- used for placeholders when buttons are
 * not relevant but just removing it would be visually unappealing.
 */
function panels_set_blank(&$form) {
  $form['#type'] = 'markup';
  $form['#value'] = theme('image', panels_get_path('images/blank.gif'));
}

/**
 * shortcut to ease the syntax of the various form builder tricks we use.
 */
function panels_edit($display, $submit = NULL) {
  $output = drupal_get_form('panels_edit_display', $display, $submit);
  $hidden = theme('panels_hidden');
  return $output . $hidden;
}

/**
 * This is separate because it must be outside the <form> to work, and
 * everything in the form theme is inside the form.
 */
function theme_panels_hidden() {
  // TODO: Move this to a theme function.
  $close_text = t('Close Window');
  $close_image = theme('image', panels_get_path('images/close.gif'));
  $output = <<<EOF
<div class="panels-hidden">\n
  <div id="panels-modal">\n
    <div class="panels-modal-content">\n
       <div class="modal-header">\n
         <a class="close" href="#">$close_text $close_image</a>\n
         <span class="modal-title">&nbsp;</span>\n
       </div>\n
       <div class="modal-content">\n
       </div>\n
    </div>\n
  </div>\n
</div>\n
EOF;

  return $output;
}

// ---------------------------------------------------------------------------
// session handling stuff for display editing

function panels_session_set($did, $var, $value) {
  $_SESSION['panels'][$did][$var] = $value;
}

function panels_session_get($did, $var) {
  return $_SESSION['panels'][$did][$var];
}

function panels_session_next($did) {
  return ++$_SESSION['panels'][$did]['counter'];
}

function panels_session_reset($did) {
  unset($_SESSION['panels'][$did]);
  if (!$_SESSION['panels']) {
    unset($_SESSION['panels']);
  }
}

// non-session globals
function panels_set($var, $value = NULL) {
  static $vars = array();
  if ($value !== NULL) {
    $vars[$var] = $value;
  }
  return $vars[$var];
}

function panels_get($var) {
  return panels_set($var);
}

// ---------------------------------------------------------------------------
// panels display editing

function panels_edit_display($display, $submit = NULL) {
  $did = $display->did;
  if (!$did) {
    $display->did = $did = 'new';
  }

  if (is_object($saved = panels_session_get($did, 'display'))) {
    $display = $saved;
  }
  else {
    panels_session_reset($did);
    panels_session_set($did, 'display', $display);
    // We may be re-editing an already edited display, meaning it might have
    // non-existent panes. We have to set our counter to the highest pane.
    foreach (array_keys((array) $display->content) as $id) {
      if (substr($id, 0, 4) == 'new-') {
        $value = intval(substr($id, 4));
        if ($value > $highest) {
          $highest = $value;
        }
      }
    }
    if ($highest) {
      panels_session_set($did, 'counter', $highest);
    }
  }

  $form['did'] = array(
    '#type' => 'hidden',
    '#value' => $display->did,
    '#id' => 'panel-did',
  );

  $form['op'] = array(
    '#type' => 'hidden',
    '#id' => 'panel-op',
  );

  $layouts = panels_get_layouts();
  $layout = $layouts[$display->layout];
  $content_types = panels_get_content_types();

  $form['#panels_display'] = $display;

  $form['button']['#tree'] = TRUE;
  foreach ($display->content as $pid => $panel) {
    $form['button'][$pid]['#tree'] = TRUE;
    $form['button'][$pid]['configure'] = panels_add_button('config.png', t('Configure'), t('Configure this pane'), 'pane-configure');
    $form['button'][$pid]['delete'] = panels_add_button('user-trash.png', t('Delete'), t('Remove this pane'), 'pane-delete');
  }

  $form['add-content'] = array(
    '#type' => 'button',
    '#value' => t('Add content'),
    '#attributes' => array('class' => 'panels-add-block'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('id' => 'panels-dnd-save'),
  );  
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );  

  $form['hide'] = array(
    '#prefix' => '<span class="panels-js-only">',
    '#suffix' => '</span>',
  );

  $form['hide']['hide-all'] = array(
    '#type' => 'submit',
    '#value' => t('Hide all'),
    '#attributes' => array('id' => 'panels-hide-all'),
  );  

  $form['hide']['show-all'] = array(
    '#type' => 'submit',
    '#value' => t('Show all'),
    '#attributes' => array('id' => 'panels-show-all'),
  );  
  
  if ($submit) {
    // The caller wants their own submit.
    $form['#submit'] = array($submit => array());
  }
  return $form;
}

function theme_panels_edit_display($form) {
  _panels_js_files();
  $layouts = panels_get_layouts();
  $display = $form['#panels_display'];
  $layout = $layouts[$display->layout];

  $content_types = panels_get_content_types();

  foreach ($layout['panels'] as $panel_id => $title) {
    foreach ((array) $display->panels[$panel_id] as $pid) {
      $pane = $display->content[$pid];
      $buttons = drupal_render($form['button'][$pid]['configure']);
      $buttons .= drupal_render($form['button'][$pid]['delete']);
      $content[$pane->panel] .= panels_show_pane($pane, $buttons);
    }
    $content[$panel_id] = theme('panels_panel_dnd', $content[$panel_id], $panel_id, $title);
  }
  $output .= drupal_render($form);
  $output .= theme('panels_dnd', panels_get_layout($layout, $content));
  return $output;
}

function panels_get_pane_content($pane) {
  $content_types = panels_get_content_types();

  $function = $content_types[$pane->type]['callback'];
  if (function_exists($function)) {
    return $function($pane->configuration); 
  }
}

function panels_get_pane_title($pane) {
  $content_types = panels_get_content_types();
  $function = $content_types[$pane->type]['admin'];
  if (function_exists($function)) {
    return $function('list', $pane->configuration); 
  }
}

function panels_show_pane($pane, $buttons, $skin = TRUE) {
  $block = panels_get_pane_content($pane);
  $title = panels_get_pane_title($pane);

  $output = theme('panels_pane_dnd', $block, $pane->pid, $title, $buttons);
  if ($skin) {
    $output = '<div class="panel-pane" id="panel-pane-' . $pane->pid . '">' . $output . '</div>';
  }
  return $output;
}

// ---------------------------------------------------------------------------
// panels ajax stuff (part of editing)

/**
 * entry point into all the ajax stuff
 */
function panels_ajax($op = NULL, $did = NULL, $pid = NULL) {
  switch ($op) {
    case 'save-display':
      if ((is_numeric($did) || $did == 'new') && $display = panels_session_get($did, 'display')) {
        panels_save_display_form($display, $_POST);
      }
      break;
    case 'add-content':
      if ((is_numeric($did) || $did == 'new') && $display = panels_session_get($did, 'display')) {
        $output->output = drupal_get_form('panels_add_content_form', $display);
        $output->type = 'display';
        $output->title = t('Choose type');
      }
      break;
    case 'submit-form':
      if ((is_numeric($did) || $did == 'new') && $display = panels_session_get($did, 'display')) {
        $output = panels_edit_submit_subform($display);
      }
      break;
    case 'configure':
      if ((is_numeric($did) || $did == 'new') && $display = panels_session_get($did, 'display')) {
        $text = drupal_get_form('panels_edit_pane_config_form', $display, $pid);
        $output = panels_get('return');
        $output->output = $text;
      }
      break;
  }      

  print drupal_to_js($output);
  exit;
}

function panels_edit_submit_subform($display) {
  // TODO: protect form_id to make sure it can only get panels forms.
  $output = drupal_get_form($_POST['form_id'], $display);

  $next = panels_get('next');

  if ($next) {
    $output = drupal_get_form($next['form'], $display, $next['data']);
    $return = panels_get('return');
    if (!$return->output) {
      $return->output = $output;
    }
  }
  else {
    if (!($return = panels_get('return'))) {
      $return->type = 'display';
      $return->output = $output;
    }
    else if ($return->type == 'display' && !$return->output) {
      $return->output = $output;
    }
  }

  return $return;
}

function panels_save_display_form($display, $post) {
  $layouts = panels_get_layouts();
  $layout = $layouts[$display->layout];

  // we're copying the content because content that doesn't appear in $post
  // was deleted.
  $old_content = $display->content;
  $display->content = array();

  foreach ($layout['panels'] as $panel_id => $title) {
    $panes = array();
    foreach ((array) $post["panel-pane-$panel_id"] as $pane) {
      $pid = substr($pane, 11);
      $panes[] = $pid;
      $old_content[$pid]->panel = $panel_id;
      $display->content[$pid] = $old_content[$pid];
    }
    $display->panels[$panel_id] = $panes;
  }
  panels_session_set($display->did, 'display', $display);
  exit;
}

// ---------------------------------------------------------------------------
// panels sub-forms

function panels_add_content_form($display) {
  $return->type = 'display';
  $return->title = t('Choose type');
  panels_set('return', $return);

  $content_types = panels_get_content_types();
  foreach ($content_types as $id => $type) {
    $options[$id] = $type['name'];
  }

  $form['did'] = array(
    '#type' => 'value',
    '#value' => $display->did,
  );

  $form['start_form'] = array('#value' => '<div class="modal-form">');

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Content type'),
    '#options' => $options,
    '#default_value' => array_shift(array_keys($content_types)),
  );

  $form['end_form'] = array('#value' => '</div>');

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#attributes' => array('class' => 'panel-submit-form'),
  );

  return $form;
}

function panels_add_content_form_submit($form_id, $form) {
  $id = $form['type'];
  panels_session_set($form['did'], 'content_type', $id);
  
  $content_types = panels_get_content_types();
  $type = $content_types[$id];

  if ($type['no_add']) {
    // if a content type is simple enough we can go straight to the
    // configure screen.
    $next['form'] = 'panels_add_content_config_form';
  }
  else {
    $next['form'] = 'panels_add_content_type_form';
    $next['data'] = $id;
  }

  panels_set('next', $next);
  return FALSE;
}

function panels_add_content_type_form($display, $id = NULL) {
  if ($id === NULL) {
    $id = panels_session_get($display->did, 'content_type');
  }
  else {
    panels_session_set($display->did, 'content_type', $id);
  }

  // set up title & info for AJAX display.
  $return->type = 'display';
  $return->title = t('Add !s', array('!s' => $id));
  panels_set('return', $return);

  $content_types = panels_get_content_types();
  $type = $content_types[$id];

  $form['did'] = array(
    '#type' => 'value',
    '#value' => $display->did,
  );

  $form['start_form'] = array('#value' => '<div class="modal-form">');

  $function = $type['admin'];
  if (function_exists($function)) {
    $form['configuration'] = $function('add form', $dummy); 
    $form['configuration']['#tree'] = true;
  }

  $form['end_form'] = array('#value' => '</div>');

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
  );

  return $form;
}

function theme_panels_add_content_type_form($form) {
  $form['start_form']['#suffix'] .= theme('status_messages');
  $output = drupal_render($form);
  return $output;
}

function panels_add_content_type_form_validate($form_id, $form_values, $form) {
  $content_type_id = panels_session_get($form_values['did'], 'content_type');
  $content_types = panels_get_content_types();
  $type = $content_types[$content_type_id];

  $function = $type['admin'];
  if (function_exists($function)) {
    $function('add validate', $form_values['configuration'], $form['configuration']);
  }
}

function panels_add_content_type_form_submit($form_id, $form) {
  $next['form'] = 'panels_add_content_config_form';
  $next['data'] = $form;

  global $debug;
  panels_set('next', $next);
  return FALSE;
}

function panels_add_content_config_form($display, $conf = NULL) {
  if ($conf === NULL) {
    $conf = panels_session_get($display->did, 'conf');
  }
  else {
    panels_session_set($display->did, 'conf', $conf);
  }
  
  $content_type_id = panels_session_get($display->did, 'content_type');
  $content_types = panels_get_content_types();
  $type = $content_types[$content_type_id];

  $function = $type['admin'];

  $form['start_form'] = array('#value' => '<div class="modal-form">');

  $form['did'] = array(
    '#type' => 'value',
    '#value' => $display->did,
  );

  $form['type'] = array(
    '#type' => 'value',
    '#value' => $content_type_id,
  );

  $layouts = panels_get_layouts();
  $layout = $layouts[$display->layout];
  $default_radio = array_shift(array_keys($layout['panels']));

  $form['panel'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#type' => 'radios',
    '#title' => t('Panel'),
    '#options' => $layout['panels'],
    '#default_value' => $default_radio,
  );

  if (function_exists($function)) {
    $panel = $function('add', $conf['configuration']);
    $return->title = t('Configure !s', array('!s' => $function('list', $panel)));
    $form['configuration'] = $function('edit', $panel);
    $form['configuration']['#tree'] = true;
  }

  $return->type = 'display';
  panels_set('return', $return);
  
  $form['end_form'] = array('#value' => '</div>');

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Add pane'),
  );
  return $form;
}

function panels_add_content_config_form_submit($form_id, $form) {
  $display = panels_session_get($form['did'], 'display');

  // keep an incrementing counter, add the data to the display.
  $pid = panels_session_next($form['did']);
  $form['pid'] = "new-$pid";

  $display->content[$form['pid']] = (object) $form;
  $display->panels[$form['panel']][] = $form['pid'];
  panels_session_set($form['did'], 'display', $display);

  $return->type = 'add';
  $return->area = $form['panel'];
  $return->id = $form['pid'];

  // we need to fake the buttons a little.
  $buttons['configure'] = panels_add_button('config.png', t('Configure'), t('Configure this pane'), 'pane-configure');
  $buttons['configure']['#parents'] = array('button', $form['pid'], 'configure');

  $buttons['delete'] = panels_add_button('user-trash.png', t('Delete'), t('Remove this pane'), 'pane-delete');
  $buttons['delete']['#parents'] = array('button', $form['pid'], 'delete');
  
  $buttons = form_builder('dummy', $buttons);
  $return->output = panels_show_pane($display->content[$form['pid']], drupal_render($buttons));

  panels_set('return', $return);
  return FALSE;
}

function panels_edit_pane_config_form($display, $pid = NULL) {
  if ($pid === NULL) {
    $pid = panels_session_get($display->did, 'pid');
  }
  else {
    panels_session_set($display->did, 'pid', $pid);
  }

  $pane = $display->content[$pid];

  $content_types = panels_get_content_types();
  $type = $content_types[$pane->type];

  $function = $type['admin'];

  $form['start_form'] = array('#value' => '<div class="modal-form">');

  $form['did'] = array(
    '#type' => 'value',
    '#value' => $display->did,
  );

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  $form['type'] = array(
    '#type' => 'value',
    '#value' => $content_type_id,
  );

  if (function_exists($function)) {
    $return->title = t('Configure !s', array('!s' => $function('list', $pane->configuration)));
    $form['configuration'] = $function('edit', $pane->configuration);
    $form['configuration']['#tree'] = true;
  }

  $return->type = 'display';
  panels_set('return', $return);
  
  $form['end_form'] = array('#value' => '</div>');

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function panels_edit_pane_config_form_submit($form_id, $form) {
  // save the new configuration.
  $display = panels_session_get($form['did'], 'display');
  $display->content[$form['pid']]->configuration = $form['configuration'];
  panels_session_set($form['did'], 'display', $display);

  $return->type = 'replace';
  $return->id = $form['pid'];

  $block = panels_get_pane_content($display->content[$form['pid']]);
  if (!$block->subject) {
    $block->subject = t('No title');
  }

  $return->output = theme('panels_pane', $block);

  panels_set('return', $return);
  return FALSE;
}

// End of ajax functions
// ---------------------

/* TODO: Integrate this back in */
function panels_edit_display_validate($form_id, $form_values, $form) {
  $content_types = panels_get_content_types();
  foreach ($form_values['content'] as $area => $content) {
    foreach ($content as $id => $item) {
      if (is_numeric($id)) {
        $function = $content_types[$item['type']]['admin'];
        if (function_exists($function)) {
          $function('validate', $item['configuration'], $form['content'][$area][$id]['configuration']);
        }
      }
    }
  }
}

/**
 * move an item in an array to the top
 */
function panels_move_top(&$array, &$position) {
  $value = $array[$position];
  unset($array[$position]);
  array_unshift($array, $value);
  // reindex the array now
  $array = array_values($array);
}

/**
 * move an item in an array to the bottom
 */
function panels_move_bottom(&$array, &$position) {
  $value = $array[$position];
  unset($array[$position]);
  $array[] = $value;
  // reindex the array now
  $array = array_values($array);
}

/**
 * move an item in an array up one position
 */
function panels_move_up(&$array, &$position) {
  $value = $array[$position];
  $array[$position] = $array[$position - 1];
  $array[$position - 1] = $value;
}

/**
 * move an item in an array up one position
 */
function panels_move_down(&$array, &$position) {
  $value = $array[$position];
  $array[$position] = $array[$position + 1];
  $array[$position + 1] = $value;
}

/**
 * Remove an item from an array
 */
function panels_move_delete(&$array, &$position) {
  unset($array[$position]);
  // reindex the array now
  $array = array_values($array);
}

// ---------------------------------------------------------------------------
// panels database functions

function panels_load_display($did) {
  $display = db_fetch_object(db_query("SELECT * FROM {panels_display} WHERE did = %d", $did));
  if (!$display) {
    return NULL;
  }
  $result = db_query("SELECT * FROM {panels_pane} WHERE did = %d ORDER BY panel, position", $did);
  while ($pane = db_fetch_object($result)) {
    $pane->configuration = unserialize($pane->configuration);
    $display->panels[$pane->panel][] = $pane->pid;
    $display->content[$pane->pid] = $pane;
  }
  return $display;
}

function panels_save_display(&$display) {
  if ($display->did && $display->did != 'new') {
    db_query("UPDATE {panels_display} SET layout = '%s' WHERE did = %d", $display->layout, $display->did);
    db_query("DELETE FROM {panels_pane} WHERE did = %d", $display->did);
  }
  else {
    $display->did = db_next_id("{panels_display}_id");
    db_query("INSERT INTO {panels_display} (did, layout) VALUES (%d, '%s')", $display->did, $display->layout);
  }

  // update all the panes
  foreach ($display->panels as $id => $panes) {
    $position = 0;
    $new_panes = array();
    foreach ((array) $panes as $pid) {
      $pane = $display->content[$pid];
      $pane->position = $position++;
      if (!is_numeric($pid)) {
        unset($display->content[$pid]);
        $pane->pid = db_next_id("{panels_pane}_pid");
      }
      db_query("INSERT INTO {panels_pane} (pid, did, panel, type, configuration, position) VALUES (%d, %d, '%s', '%s', '%s', %d)", $pane->pid, $display->did, $pane->panel, $pane->type, serialize($pane->configuration), $pane->position);
      // and put it back so our pids and positions can be used
      $display->content[$pid] = $pane;
      $new_panes[] = $pid;
    }
    $display->panels[$id] = $panes;
  }

  return $display; // to be nice, even tho we have a reference.
}

function panels_delete_display($display) {
  db_query("DELETE FROM {panels_display} WHERE did = %d", $display->did);
  db_query("DELETE FROM {panels_pane} WHERE did = %d", $display->did);
}

/**
 * For external use: Given a layout ID and a $content array, return the
 * panel display.
 */
function panels_print_layout($id, $content) {
  $layouts = panels_get_layouts();
  $layout = $layouts[$id];
  if (!$layout) {
    return;
  }
  
  return panels_get_layout($layout, $content);
}

/**
 * Given a full layout structure and a content array, render a panel display.
 */
function panels_get_layout($layout, $content) {
  $output = theme($layout['theme'], check_plain($layout['css_id']), $content);

  if ($output) {
    if (file_exists(path_to_theme() . '/' . $layout['css'])) {
      drupal_add_css(path_to_theme() . '/' . $layout['css']);
    }
    else {
      drupal_add_css(panels_get_path($layout['css'], false, $layout['module']));
    }
  }
  return $output;
}


// ---------------------------------------------------------------------------
// panels data loading

function panels_load_includes($directory, $callback) {
  // Load all our module 'on behalfs'.
  $path = panels_get_path($directory);

  $files = drupal_system_listing('.inc$', $path, 'name', 0);
  foreach($files as $file) {
    require_once('./' . $file->filename);
  }
  $output = module_invoke_all($callback);
  foreach ($files as $file) {
    $function = 'panels_' . $file->name . '_' . $callback;
    if (function_exists($function)) {
      $result = $function();
      if (isset($result) && is_array($result)) {
        $output = array_merge($output, $result);
      }
    }
  }
  return $output;
}

function panels_get_layouts() {
  static $layouts = NULL;
  if (!$layouts) {
    $layouts = panels_load_includes('layouts', 'panels_layouts');
  }
  return $layouts;
}

function panels_get_content_types() {
  static $content_types = NULL;
  if (!$content_types) {
    $content_types = panels_load_includes('content_types', 'panels_content_types');
  }
  return $content_types;
}

/**
 * Includes required JavaScript libraries:
 * jQuery, iutil, idrag, idrop, isortables
 * In addition to panels.js.
 */
function _panels_js_files() {
  // while we don't use this directly some of our forms do.
  drupal_add_js('misc/collapse.js');
  drupal_add_js('misc/autocomplete.js');

  drupal_add_js(panels_get_path('js/lib/iutil.js'));
  drupal_add_js(panels_get_path('js/lib/idrag.js'));
  drupal_add_js(panels_get_path('js/lib/idrop.js'));
  drupal_add_js(panels_get_path('js/lib/isortables.js'));
  drupal_add_js(panels_get_path('js/lib/dimensions.js'));
  drupal_add_js(panels_get_path('js/lib/mc.js'));
  drupal_add_js(panels_get_path('js/lib/form.js'));
  drupal_add_js(panels_get_path('js/display_editor.js'));
  drupal_add_css(panels_get_path('css/panels_dnd.css'));
  drupal_add_css(panels_get_path('css/panels_admin.css'));
}

// ---------------------------------------------------------------------------
// Panels theming functions

function theme_panels_dnd($content) {
  $output = "<div class=\"panels-dnd\" id=\"panels-dnd-main\">$content</div>";
  return $output;
}

function theme_panels_panel_dnd($content, $area, $label) {
  return "<div class=\"panels-dnd-col\" id=\"panel-pane-$area\"><h2 class=\"label\">$label</h2>$content</div>";
}

function theme_panels_pane_dnd($block, $id, $label, $buttons = NULL) {
  if (!$block->subject) {
    $block->subject = t('No title');
  }
  static $count = 0;
  $output .= "<div class=\"grabber\">";
  if ($buttons) {
    $output .= "<span class='buttons'>$buttons</span>";
  }
  $output .= "$label</div>";
  $output .= '<div class="panel-pane-collapsible">';
  $output .= theme('panels_pane', $block);
  $output .= '</div>';
  return $output;
}

function theme_panels_pane($block) {
  $output .= '<h2 class="title">' . $block->subject . '</h2>';
  $output .= '<div class="content">' . $block->content . '</div>';
  return $output;
}

/**
 * Print the layout link. Sends out to a theme function.
 */
function panels_print_layout_link($id, $layout, $link) {
  drupal_add_css(panels_get_path('css/panels_admin.css'));
  $file = panels_get_path($layout['icon'], false, $layout['module']);
  $image = l(theme('image', $file), $link, NULL, NULL, NULL, NULL, TRUE);
  $title = l($layout['title'], $link);
  return theme('panels_layout_link', $title, $id, $image, $link);
}

function panels_print_layout_icon($id, $layout, $title = NULL) {
  drupal_add_css(panels_get_path('css/panels_admin.css'));
  $file = panels_get_path($layout['icon'], false, $layout['module']);
  return theme('panels_layout_icon', $id, theme('image', $file), $title);
}

/**
 * Theme the layout link image
 */
function theme_panels_layout_link($title, $id, $image, $link) {
  $output .= '<div class="layout-link">';
  $output .= $image;
  $output .= '<div>' . $title . '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Theme the layout icon image
 */
function theme_panels_layout_icon($id, $image, $title = NULL) {
  $output .= '<div class="layout-icon">';
  $output .= $image;
  if ($title) {
    $output .= '<div class="caption">' . $title . '</div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Helper function for autocompletion of node titles.
 * This is mostly stolen from clipper.
 */
function panels_node_autocomplete($string) {
  if ($string != '') { // if there are node_types passed, we'll use those in a MySQL IN query.
    $result = db_query_range(db_rewrite_sql('SELECT n.title, u.name FROM {node} n INNER JOIN {users} u ON u.uid = n.uid WHERE LOWER(title) LIKE LOWER("%%%s%%")'), $string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    $matches = array();
    while ($node = db_fetch_object($result)) {
      $n = $node->title;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (preg_match('/,/', $node->title) || preg_match('/"/', $node->title)) {
        $n = '"'. preg_replace('/"/', '""', $node->title) .'"';
      }
      $matches[$prefix . $n] = '<span class="autocomplete_title">'. check_plain($node->title) .'</span> <span class="autocomplete_user">('. t('by %user', array('%user' => check_plain($node->name))) .')</span>';
    }
    print drupal_to_js($matches);
    exit();
  }
}
