<?php
// $Id: panels_mini.module,v 1.1.2.7 2007/11/20 17:54:21 merlinofchaos Exp $

/**
 * Implementation of hook_help()
 */
function panels_mini_help($section = '') {
  switch ($section) {
    case 'admin/panels/panel-mini':
    case 'admin/panels/panel-mini/list':
      return t('<p>You can edit existing mini panels, or click add to create a new one.</p>');
    case 'admin/panels/panel-mini/add':
      return t('<p>Mini panels are the small variants of panel pages. Instead of pages, they define blocks.</p>');
  }
}

/**
 * Implementation of hook_perm().
 */
function panels_mini_perm() {
  return array('create mini panels', 'administer mini panels');
}

/**
 * Implementation of hook_menu()
 */
function panels_mini_menu($may_cache) {
  if ($may_cache) {
    $access = user_access('create mini panels');

    $items[] = array(
      'path' => 'admin/panels/panel-mini',
      'title' => t('Mini panels'),
      'access' => $access,
      'callback' => 'panels_mini_list_page',
      'description' => t('Create and administer mini panels (panels exposed as blocks).'),
    );
    $items[] = array(
      'path' => 'admin/panels/panel-mini/list',
      'title' => t('List'),
      'access' => $access,
      'callback' => 'panels_mini_list_page',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/panels/panel-mini/add',
      'title' => t('Add'),
      'access' => $access,
      'callback' => 'panels_mini_add_page',
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/panels/panel-mini/settings',
      'title' => t('Settings'),
      'access' => $access,
      'callback' => 'panels_mini_settings',
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/panels/panel-mini/disable',
      'access' => $access,
      'callback' => 'panels_mini_disable_page',
      'weight' => -1,
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/panels/panel-mini/enable',
      'access' => $access,
      'callback' => 'panels_mini_enable_page',
      'weight' => -1,
      'type' => MENU_CALLBACK,
    );
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'panels' && arg(2) == 'panel-mini') {
      $mini = panels_mini_load(arg(3));
      if ($mini && empty($mini->disabled)) {
        panels_mini_menu_items($items, "admin/panels/panel-mini/$mini->name", $mini);
      }
    }
  }
  return $items;
}

function panels_mini_menu_items(&$items, $base, $panel_mini) {
  $access = user_access('administer mini panels');

  if ($access) {
    $items[] = array(
      'path' => $base,
      'title' => t('Edit'),
      'access' => $access,
      'callback' => 'panels_mini_edit',
      'callback arguments' => array($panel_mini),
      'weight' => -5,
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => $base .'/edit/general',
      'title' => t('General'),
      'access' => $access,
      'callback' => 'panels_mini_edit',
      'callback arguments' => array($panel_mini),
      'weight' => -5,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => $base .'/edit/layout',
      'title' => t('Layout'),
      'access' => $access,
      'callback' => 'panels_mini_edit_layout',
      'callback arguments' => array($panel_mini),
      'weight' => -3,
      'type' => MENU_LOCAL_TASK,
    );

    $items[] = array(
      'path' => $base .'/edit/settings',
      'title' => t('Layout settings'),
      'access' => $access,
      'callback' => 'panels_mini_edit_layout_settings',
      'callback arguments' => array($panel_mini),
      'weight' => -3,
      'type' => MENU_LOCAL_TASK,
    );

    $items[] = array(
      'path' => $base .'/edit/content',
      'title' => t('Content'),
      'access' => $access,
      'callback' => 'panels_mini_edit_content',
      'callback arguments' => array($panel_mini),
      'weight' => -1,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => $base . '/export',
      'title' => t('Export'),
      'access' => $access,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('panels_mini_edit_export', $panel_mini),
      'weight' => -9,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => $base .'/delete',
      'title' => t('Delete mini panel'),
      'access' => user_access('create mini panels'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('panels_mini_delete_confirm', $panel_mini),
      'type' => MENU_CALLBACK,
    );
  }
}

// ---------------------------------------------------------------------------
// Mini panel administrative pages.

/**
 * Settings for mini panels.
 */
function panels_mini_settings() {
  panels_load_include('common');
  return drupal_get_form('panels_common_settings', 'panels_mini');
}

/**
 * Provide a list of mini panels, with links to edit or delete them.
 */
function panels_mini_list_page() {
  panels_load_include('plugins');
  $layouts = panels_get_layouts();
  $items = array();
  $sorts = array();

  $header = array(
    array('data' => t('Title'), 'field' => 'title', 'sort' => 'asc'),
    array('data' => t('Type'), 'field' => 'type'),
    t('Layout'),
    t('Operations'),
  );

  foreach (panels_mini_load_all() as $panel_mini) {
    $ops = array();
    if (empty($panel_mini->disabled)) {
      $ops[] = l(t('Edit'), "admin/panels/panel-mini/$panel_mini->name/edit/general");
      $ops[] = l(t('Export'), "admin/panels/panel-mini/$panel_mini->name/export");
    }
    if ($panel_mini->type != t('Default')) {
      $ops[] = l(t('Delete'), "admin/panels/panel-mini/$panel_mini->name/delete");
    }
    else {
      if (empty($panel_mini->disabled)) {
        $ops[] = l(t('Disable'), "admin/panels/panel-mini/disable/$panel_mini->name", NULL, drupal_get_destination());
      }
      else {
        $ops[] = l(t('Enable'), "admin/panels/panel-mini/enable/$panel_mini->name", NULL, drupal_get_destination());
      }
    }

    $item = array();
    $item[] = check_plain($panel_mini->title);
    $item[] = $panel_mini->type; // this is safe as it's always programmatic

    if (empty($panel_mini->display)) {
      $panel_mini->display = panels_load_display($panel_mini->did);
    }

    $item[] = check_plain($layouts[$panel_mini->display->layout]['title']);
    $item[] = implode(' | ', $ops);
    $items[] = $item;
    $ts = tablesort_init($header);
    switch ($ts['sql']) {
      case 'title':
      default:
        $sorts[] = $item[0];
        break;
      case 'type':
        $sorts[] = $panel_mini->type . $item[0];
        break;
    }
  }

  if (strtolower($ts['sort']) == 'desc') {
    arsort($sorts);
  }
  else {
    asort($sorts);
  }

  $i = array();
  foreach ($sorts as $id => $title) {
    $i[] = $items[$id];
  }

  $output = theme('table', $header, $i);
  return $output;
}

/**
 * Provide a form to confirm deletion of a mini panel.
 */
function panels_mini_delete_confirm($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  $form['pid'] = array('#type' => 'value', '#value' => $panel_mini->pid);
  $form['did'] = array('#type' => 'value', '#value' => $panel_mini->did);
  return confirm_form($form,
    t('Are you sure you want to delete the mini panel "@title"?', array('@title' => $panel_mini->title)),
    $_GET['destination'] ? $_GET['destination'] : 'admin/panels/panel-mini',
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/**
 * Handle the submit button to delete a mini panel.
 */
function panels_mini_delete_confirm_submit($formid, $form) {
  if ($form['confirm']) {
    panels_mini_delete((object) $form);
    return 'admin/panels/panel-mini';
  }
}

/**
 * Page callback to export a panel page to PHP code.
 */
function panels_mini_edit_export($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  drupal_set_title(check_plain($panel_mini->title));
  $code = panels_mini_export($panel_mini);

  $lines = substr_count($code, "\n");
  $form['code'] = array(
    '#type' => 'textarea',
    '#title' => $panel_mini->title,
    '#default_value' => $code,
    '#rows' => $lines);
  return $form;
}

/**
 * Handle the add mini panel page.
 */
function panels_mini_add_page($layout = NULL) {
  panels_load_include('plugins');
  $layouts = panels_get_layouts();

  if ($layout === NULL) {
    foreach ($layouts as $id => $layout) {
      $output .= panels_print_layout_link($id, $layout, $_GET['q'] .'/'. $id);
    }
    return $output;
  }

  if (!$layouts[$layout]) {
    return drupal_not_found();
  }

  $panel_mini->display = panels_new_display();
  $panel_mini->display->layout = $layout;
  $panel_mini->pid = 'new';
  $panel_mini->did = 'new';
  return panels_mini_edit($panel_mini);
}

/**
 * Edit a mini panel. Called from both the add and edit points to provide for
 * common flow.
 */
function panels_mini_edit($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  drupal_set_title(check_plain($panel_mini->title));
  return drupal_get_form('panels_mini_edit_form', $panel_mini);
}

/**
 * The form to edit the settings of a mini panel.
 */
function panels_mini_edit_form($panel_mini) {
  panels_load_include('common');
  drupal_add_css(panels_get_path('css/panels_admin.css'));

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $panel_mini->pid,
  );
  $form['panel_mini'] = array(
    '#type' => 'value',
    '#value' => $panel_mini
  );

  $form['right'] = array(
    '#prefix' => '<div class="layout-container">',
    '#suffix' => '</div>',
  );
  $form['left'] = array(
    '#prefix' => '<div class="info-container">',
    '#suffix' => '</div>',
  );

  $form['left']['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
  );
  $form['left']['settings']['title'] = array(
    '#type' => 'textfield',
    '#size' => 24,
    '#default_value' => $panel_mini->title,
    '#title' => t('Mini panel title'),
    '#description' => t('The title for this mini panel. It can be overridden in the block configuration.'),
  );

  $form['left']['settings']['name'] = array(
    '#type' => 'textfield',
    '#size' => 24,
    '#default_value' => $panel_mini->name,
    '#title' => t('Mini panel name'),
    '#description' => t('A unique name used to identify this panel page internally. It must be only be alpha characters and underscores. No spaces, numbers or uppercase characters.'),
  );

  // Add the "panel settings" section of the form and the accompanying submit
  // handler.
  $form['right']['layout'] = panels_common_get_layout_information($panel_mini);

  $label = ($panel_mini->pid == 'new') ? t('Next') : t('Save');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
  );

  return $form;
}

/**
 * Validate submission of the mini panel edit form.
 */
function panels_mini_edit_form_validate($form_id, $form_values, $form) {
  // Test uniqueness of name:
  if (!$form_values['name']) {
    form_error($form['left']['settings']['name'], t('Panel mini name is required.'));
  }
  else if (preg_match("/[^A-Za-z0-9_]/", $form_values['name'])) {
    form_error($form['left']['settings']['name'], t('Name must be alphanumeric or underscores only.'));
  }
  else {
    $query = "SELECT pid FROM {panels_mini} WHERE name = '%s'";
    if (!empty($form_values['pid']) && is_numeric($form_values['pid'])) {
      $query .= " AND pid != $form_values[pid]";
    }
    if (db_result(db_query($query, $form_values['name']))) {
      form_error($form['left']['settings']['name'], t('Panel name must be unique.'));
    }
  }
}

/**
 * Process submission of the mini panel edit form.
 */
function panels_mini_edit_form_submit($form_id, $form_values) {
  $panel_mini = $form_values['panel_mini'];
  if ($panel_mini->pid != 'new' && $panel_mini->name != $form_values['name']) {
    // update all existing mini panels to point to this one appropriately.
    db_query("UPDATE {blocks} b SET delta = '%s' WHERE b.module = 'panels_mini' AND b.delta = '%s'", $form_values['name'], $panel_mini->name);

    // Above was blocks; these are actual panel panes.
    $result = db_query("SELECT * FROM {panels_pane} WHERE type = 'panels_mini' and subtype = '%s'", $panel_mini->name);
    while ($pane = db_fetch_object($result)) {
      $conf = unserialize($pane->configuration);
      $conf['name'] = $form_values['name'];
      db_query("UPDATE {panels_pane} SET configuration = '%s', subtype = '%s' WHERE pid = %d", serialize($conf), $conf['name'], $pane->pid);
    }
  }

  $panel_mini->title  = $form_values['title'];
  $panel_mini->name = $form_values['name'];

  if ($panel_mini->pid == 'new') {
    panels_mini_save($panel_mini);
    // TODO: Why not use form_set_value() -- Because we don't have the $form.
    $GLOBALS['form_values']['pid'] = $panel_mini->pid;

    return "admin/panels/panel-mini/$panel_mini->name/edit/content";
  }
  else {
    drupal_set_message(t('Your changes have been saved.'));
    panels_mini_save($panel_mini);
  }
}

/**
 * Enable a default panel mini
 */
function panels_mini_enable_page($name = NULL) {
  $defaults = panels_mini_default_panels();
  if (isset($defaults[$name])) {
    $status = variable_get('panel_mini_defaults', array());
    $status[$name] = FALSE;
    variable_set('panel_mini_defaults', $status);
    drupal_set_message(t('Panel mini enabled'));
  }
  drupal_goto();
}

/**
 * Disable a default panel.
 */
function panels_mini_disable_page($name = NULL) {
  $defaults = panels_mini_default_panels();
  if (isset($defaults[$name])) {
    $status = variable_get('panel_mini_defaults', array());
    $status[$name] = TRUE;
    variable_set('panel_mini_defaults', $status);
    drupal_set_message(t('Panel mini disabled'));
  }
  drupal_goto();
}

/**
 * Pass through to the panels content editor.
 */
function panels_mini_edit_content($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  $panel_mini->display->context = array();

  panels_load_include('common');
  $content_types = panels_common_get_allowed_types('panels_mini');

  // Print this with theme('page') so that blocks are disabled while editing a display.
  // This is important because negative margins in common block layouts (i.e, Garland)
  // messes up the drag & drop.
  drupal_set_title(check_plain($panel_mini->title));
  print theme('page', panels_edit($panel_mini->display, "admin/panels/panel-mini/$panel_mini->name/edit/content", $content_types), FALSE);
}

/**
 * Pass through to the panels layout editor.
 */
function panels_mini_edit_layout($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  drupal_set_title(check_plain($panel_mini->title));
  return panels_edit_layout($panel_mini->display, t('Save'), "admin/panels/panel-mini/$panel_mini->name/edit/layout");
}

/**
 * Pass through to the panels layout settings editor.
 */
function panels_mini_edit_layout_settings($panel_mini) {
  if (!is_object($panel_mini)) {
    $panel_mini = panels_mini_load($panel_mini);
  }
  drupal_set_title(check_plain($panel_mini->title));
  return panels_edit_layout_settings($panel_mini->display, t('Save'), "admin/panels/panel-mini/$panel_mini->name/edit/settings");
}

// ---------------------------------------------------------------------------
// Allow the rest of the system access to mini panels

/**
 * Implementation of hook_block(). Expose qualifying mini panels to Drupal's
 * block system.
 */
function panels_mini_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks = array();

    $result = db_query("SELECT * FROM {panels_mini} ORDER BY title");
    while ($panel_mini = db_fetch_object($result)) {
      $blocks[$panel_mini->pid] = array(
        'info' => t('Mini panel: "@title"', array('@title' => $panel_mini->title)),
      );
    }

    return $blocks;
  }
  elseif ($op == 'view') {
    $panel_mini = panels_mini_load($delta);
    $block = array(
      'subject' => $panel_mini->title,
      'content' => panels_render_display($panel_mini->display)
    );
    return $block;
  }
}

/**
 * Expose all mini panels to our own system.
 */
function panels_mini_panels_content_types() {
  $items['panels_mini'] = array(
    'title' => t('Mini panels'),
    'content_types' => 'panels_mini_content_types',
    'render callback' => 'panels_mini_content',
    'add callback' => 'panels_mini_add_mini_panel',
    'edit callback' => 'panels_mini_edit_mini_panel',
    'title callback' => 'panels_mini_title_mini_panel',
  );
  return $items;
}

/**
 * Return each available mini panel available as a sub type
 */
function panels_mini_content_types() {
  $types = array();
  foreach (panels_mini_load_all() as $mini) {
    if (!empty($mini->disabled)) {
      continue;
    }

    $types[$mini->name] = array(
      'title' => filter_xss_admin($mini->title),
      // For now mini panels will just use the contrib block icon.
      'icon' => 'icon_contrib_block.png',
      'path' => panels_get_path("content_types/block"),
      'description' => filter_xss_admin($mini->title),
//      'required context' => $contexts,
      'category' => array(t('Mini panels'), -8),
    );
  }
  return $types;
}

/**
 * Render a mini panel called from a panels display
 */
function panels_mini_content($conf, $panel_args, &$contexts) {
  $mini = panels_mini_load($conf['name']);
  if (empty($mini) || !empty($mini->disabled)) {
    return;
  }

  $mini->display->args = $panel_args;
  $mini->display->css_id = 'mini-panel-' . $conf['name'];

  $block->module = 'panels_mini';
  $block->delta = $conf['name'];
  $block->subject = filter_xss_admin($mini->title);
  $block->content = panels_render_display($mini->display);
  return $block;

}
/**
 * From to add a mini panel to a panel.
 */
function panels_mini_add_mini_panel($id, $parents, $conf = array()) {
  $conf['name'] = $id;
  return panels_mini_edit_mini_panel($id, $parents, $conf);
}

/**
 * Returns an edit form for the mini panel; there isn't much here as most
 * of this is set up at mini panel creation time.
 */
function panels_mini_edit_mini_panel($id, $parents, $conf) {
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $conf['name'],
  );

  return $form;
}

function panels_mini_title_mini_panel($conf) {
  $mini = panels_mini_load($conf['name']);
  $title = filter_xss_admin($mini->title);
  if (empty($title)) {
    $title = t('Untitled mini panel');
  }
  return $title;
}

// ---------------------------------------------------------------------------
// Database functions.

/**
 * Sanitize a mini, to guarantee certain data is as we believe it will be.
 */
function panels_mini_sanitize($mini) {
  foreach (array('contexts', 'relationships') as $id) {
    if (!is_array($mini->$id)) {
      $mini->$id = array();
    }
  }

  return $mini;
}

/**
 * Fetch all panel pages in the system. This function does not cache.
 */
function panels_mini_load_all($page_size = 0) {
  $panels = $dids = array();
  $query = "SELECT * FROM {panels_mini}";
  if ($page_size) {
    $result = pager_query($query, $page_size);
  }
  else {
    $result = db_query($query);
  }

  while ($page = db_fetch_object($result)) {
    $page->contexts = (!empty($page->contexts)) ? unserialize($page->contexts) : array();
    $page->relationships = (!empty($page->relationships)) ? unserialize($page->relationships) : array();

    $page->type = t('Local');
    $panels[$page->name] = panels_mini_sanitize($page);
  }

  $status = variable_get('panel_mini_defaults', array());
  foreach (panels_mini_default_panels() as $mini) {
    // Determine if default panel is enabled or disabled.
    if (isset($status[$mini->name])) {
      $mini->disabled = $status[$mini->name];
    }

    if (!empty($panels[$mini->name])) {
      $panels[$mini->name]->type = t('Overridden');
    }
    else {
      $mini->type = t('Default');
      $panels[$mini->name] = $mini;
    }
  }
  return $panels;
}

/**
 * Load a mini panel.
 */
function panels_mini_load($pid) {
  static $cache = array();
  if (!array_key_exists($pid, $cache)) {
    if (!is_numeric($pid)) {
      $where = "name = '%s'";
    }
    else {
      $where = 'pid = %d';
    }
    $mini = db_fetch_object(db_query("SELECT * FROM {panels_mini} WHERE $where", $pid));
    if (!$mini) {
      $defaults = panels_mini_default_panels();
      if (isset($defaults[$pid])) {
        $mini = $defaults[$pid];
        $status = variable_get('panel_mini_defaults', array());
        // Determine if default panel is enabled or disabled.
        if (isset($status[$mini->name])) {
          $mini->disabled = $status[$mini->name];
        }
        $cache[$pid] = $mini;
        return $mini;
      }
      return;
    }

    $mini->contexts = (!empty($mini->contexts)) ? unserialize($mini->contexts) : array();
    $mini->relationships = (!empty($mini->relationships)) ? unserialize($mini->relationships) : array();

    $cache[$pid] = panels_mini_sanitize($mini);

    $cache[$pid]->display = panels_load_display($cache[$pid]->did);
  }
  return $cache[$pid];
}

/**
 * Save a mini panel.
 */
function panels_mini_save(&$panel_mini) {
  $display = panels_save_display($panel_mini->display);

  if ($panel_mini->pid && $panel_mini->pid != 'new') {
    db_query(
      "UPDATE {panels_mini} SET " .
      "did = %d, " .
      "name = '%s', " .
      "title = '%s', " .
      "relationships = '%s', " .
      "contexts = '%s' " .
      "WHERE pid = %d",
        $panel_mini->did,
        $panel_mini->name,
        $panel_mini->title,
        serialize($panel_mini->relationships),
        serialize($panel_mini->contexts),
      $panel_mini->pid
    );
  }
  else {
    $panel_mini->pid = db_next_id("{panels_mini}_pid");
    db_query(
      "INSERT INTO {panels_mini} ( " .
        "pid, " .
        "name, " .
        "did, " .
        "title, " .
        "relationships, " .
        "contexts " .
      ") " .
      "VALUES (" .
        "%d, " .
        "'%s', " .
        "%d, " .
        "'%s', " .
        "'%s', " .
        "'%s'" .
      ")",
        $panel_mini->pid,
        $panel_mini->name,
        $display->did,
        $panel_mini->title,
        serialize($panel_mini->relationships),
        serialize($panel_mini->contexts)
    );
  }

  return $panel_mini->pid;
}

/**
 * Delete a mini panel.
 */
function panels_mini_delete($panel_mini) {
  db_query("DELETE FROM {panels_mini} WHERE pid = %d", $panel_mini->pid);
  db_query("DELETE FROM {blocks} WHERE module = 'panels_mini' AND delta = %d", $panel_mini->pid);
  return panels_delete_display($panel_mini->did);
}

/**
 * Export a panel page into PHP code for use in import. The code returned from
 * can be used directly in panels_mini_save().
 */
function panels_mini_export($panel_mini) {
  $output = '';
  $fields = array('name', 'title', 'contexts', 'relationships');
  $output .= '$mini = new stdClass()' . ";\n";
  $output .= '$mini->pid = \'new\'' . ";\n";
  foreach ($fields as $field) {
    $output .= '  $mini->' . $field . ' = ' . panels_var_export($panel_mini->$field, '  ') . ";\n";
  }
  // Export the primary display
  $display = !empty($panel_mini->display) ? $panel_mini->display : panels_load_display($panel_mini->did);
  $output .= panels_export_display($display);
  $output .= '$mini->display = $display' . ";\n";

  return $output;
}

/**
 * Get all 'default' panels.
 */
function panels_mini_default_panels() {
  $panels = module_invoke_all('default_panel_minis');
  if (!is_array($panels)) {
    $panels = array();
  }

  return $panels;
}

/**
 * Provide panels mini with its own category
 */
function panels_mini_panels_block_info($module, $delta, &$info) {
  // Remove the block version of mini panels from being available content types.
  $info = NULL;
/*
  $info['icon'] = 'icon_contrib_block.png';
  $info['category'] = array(t('Mini panels'), -8);
*/
}
