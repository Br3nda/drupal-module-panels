<?php
// $Id: panels.install,v 1.1.6.32 2008/01/17 00:11:15 merlinofchaos Exp $

/**
 * Install the panels tables
 */
function panels_install() {
  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      db_query(<<<EOT
        CREATE TABLE {panels_page} (
          pid integer NOT NULL DEFAULT 0,
          name varchar(255) UNIQUE,
          did integer,
          title varchar(128),
          access varchar(128),
          path varchar(128),
          css_id varchar(128),
          css text,
          arguments text,
          displays text,
          contexts text,
          relationships text,
          no_blocks smallint DEFAULT 0,
          -- menu fields
          menu smallint DEFAULT 0,
          menu_tab smallint,
          menu_tab_weight smallint,
          menu_title varchar(255),
          menu_tab_default smallint,
          menu_tab_default_parent_type varchar(10),
          menu_parent_title varchar(255),
          menu_parent_tab_weight smallint,
          PRIMARY KEY (pid)
        );
EOT
      );
      db_query("CREATE SEQUENCE {panels_page}_pid_seq;");
      db_query("CREATE INDEX {panels_page}_path_idx ON {panels_page} (path);");
      db_query("CREATE INDEX {panels_page}_name_idx ON {panels_page} (name);");

      db_query(<<<EOT
        CREATE TABLE {panels_display} (
          did integer NOT NULL DEFAULT 0,
          name varchar(255) UNIQUE,
          layout varchar(32),
          layout_settings text,
          panel_settings text,
          cache text,
          PRIMARY KEY (did)
        );
EOT
      );
      db_query("CREATE SEQUENCE {panels_display}_did_seq;");
      db_query("CREATE INDEX {panels_display}_name_idx ON {panels_page} (name);");

      db_query(<<<EOT
        CREATE TABLE {panels_pane} (
          pid integer NOT NULL DEFAULT 0,
          did integer NOT NULL DEFAULT 0,
          panel varchar(32),
          type varchar(32),
          subtype varchar(64),
          access varchar(128),
          configuration text,
          cache text,
          position smallint
        );
EOT
      );
      db_query("CREATE SEQUENCE {panels_pane}_pid_seq;");
      db_query("CREATE INDEX {panels_pane}_did_idx ON {panels_pane} (did);");
      db_query(<<<EOT
        CREATE TABLE {panels_object_cache} (
          sid varchar(64),
          did integer,
          obj varchar(255),
          timestamp integer,
          data text
        );
EOT
      );
      db_query("CREATE INDEX {panels_object_cache}_idx ON {panels_object_cache} (sid, obj, did);");
      db_query("CREATE INDEX {panels_object_cache}_time_idx ON {panels_object_cache} (timestamp);");
      break;
    case 'mysql':
    case 'mysqli':
      db_query(<<<EOT
        CREATE TABLE {panels_page} (
          pid int(10) NOT NULL DEFAULT 0 PRIMARY KEY,
          name varchar(255) UNIQUE,
          did int(10),
          title varchar(128),
          access varchar(128),
          path varchar(128),
          css_id varchar(128),
          css longtext,
          arguments longtext,
          displays longtext,
          contexts longtext,
          relationships longtext,
          no_blocks int(1) DEFAULT 0,
          -- menu fields
          menu int(1) DEFAULT 0,
          menu_tab int(1),
          menu_tab_weight int(4),
          menu_title varchar(255),
          menu_tab_default int(1),
          menu_tab_default_parent_type varchar(10),
          menu_parent_title varchar(255),
          menu_parent_tab_weight int(4),
          KEY path (path),
          KEY (name)
        )/*!40100 DEFAULT CHARACTER SET utf8 */
EOT
      );

      db_query(<<<EOT
        CREATE TABLE {panels_display} (
          did INT(10) NOT NULL DEFAULT 0 PRIMARY KEY,
          name varchar(255) UNIQUE,
          layout VARCHAR(32),
          layout_settings longtext,
          panel_settings longtext,
          cache text
        ) /*!40100 DEFAULT CHARACTER SET utf8 */
EOT
      );

      db_query(<<<EOT
        CREATE TABLE {panels_pane} (
          pid int(10) NOT NULL DEFAULT 0,
          did int(10) NOT NULL DEFAULT 0,
          panel varchar(32),
          type varchar(32),
          subtype varchar(64),
          access varchar(128),
          configuration longtext,
          cache longtext,
          position int(5),
          key (did)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */
EOT
      );
      db_query(<<<EOT
        CREATE TABLE {panels_object_cache} (
          sid varchar(64),
          did integer,
          obj varchar(255),
          data text,
          timestamp integer,
          KEY (sid, obj, did),
          KEY (timestamp)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */
EOT
      );
      db_query("CREATE INDEX {panels_object_cache}_idx ON {panels_object_cache} (sid, obj, did);");
  }
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'panels'");

  if (!module_exists('panels_page')) {
    drupal_set_message(t('It is recommended that you also enable the Panels page module.'));
  }
}

function panels_uninstall() {
  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      db_query("DROP SEQUENCE {panels_page}_pid_seq");
      db_query("DROP SEQUENCE {panels_pane}_pid_seq");
      db_query("DROP SEQUENCE {panels_display}_did_seq");
      db_query("DROP TABLE {panels_display}");
      db_query("DROP TABLE {panels_pane}");
      db_query("DROP TABLE {panels_page}");
      db_query("DROP TABLE {panels_object_cache}");
      break;
    case 'mysql':
    case 'mysqli':
      db_query("DROP TABLE IF EXISTS {panels_display}");
      db_query("DROP TABLE IF EXISTS {panels_pane}");
      db_query("DROP TABLE IF EXISTS {panels_page}");
      db_query("DROP TABLE IF EXISTS {panels_object_cache}");
      break;
  }
}

/**
 * Update the tables to UTF-8
 */
function panels_update_1() {
  return _system_update_utf8(array('panels_info', 'panels_area'));
}


function panels_update_1000() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_info} RENAME {panels_page}");
  $ret[] = update_sql("ALTER TABLE {panels_page} CHANGE COLUMN did pid int(10) NOT NULL DEFAULT 0;");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN did int(10) NOT NULL DEFAULT 0 AFTER pid");
  $ret[] = update_sql("UPDATE {panels_page} SET did = pid");

  $max_pid = db_result(db_query("SELECT MAX(pid) FROM {panels_page}"));
  if ($max_pid) {
    $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{panels_page}_pid', $max_pid)");
  }

  $ret[] = update_sql("ALTER TABLE {panels_area} RENAME {panels_pane}");
  $ret[] = update_sql("ALTER TABLE {panels_pane} ADD COLUMN pid int(10) NOT NULL DEFAULT 0 FIRST");
  $ret[] = update_sql("ALTER TABLE {panels_pane} CHANGE area panel varchar(32)");
  $result = db_query("SELECT * FROM {panels_pane}");
  while ($pane = db_fetch_object($result)) {
    $count++;
    $ret[] = update_sql("UPDATE {panels_pane} SET pid = $count WHERE did = $pane->did AND panel = '$pane->panel' AND position = $pane->position");
  }
  if ($count) {
    $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{panels_pane}_pid', $count)");
  }

  $ret[] = update_sql(<<<EOT
    CREATE TABLE {panels_display} (
      did INT(10) NOT NULL DEFAULT 0 PRIMARY KEY,
      layout VARCHAR(32)
    ) /*!40100 DEFAULT CHARACTER SET utf8 */
EOT
);
  $result = db_query("SELECT did, layout FROM {panels_page}");
  $max_did = 0;
  while ($display = db_fetch_object($result)) {
    $ret[] = update_sql("INSERT INTO {panels_display} VALUES ($display->did, '$display->layout')");
    if ($display->did > $max_did) {
      $max_did = $display->did;
    }
  }
  $ret[] = update_sql("ALTER TABLE {panels_page} DROP COLUMN layout");
  if ($max_did) {
    $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{panels_display}_did', $max_did)");
  }
  return $ret;
}

function panels_update_1001() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN no_blocks int(1)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu int(1) DEFAULT 0");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_tab int(1)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_tab_weight int(4)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_title varchar(255)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_tab_default int(1)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_tab_default_parent_type varchar(10)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_parent_title varchar(255)");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN menu_parent_tab_weight int(4)");
  return $ret;
}

// Create a field for the layout settings
function panels_update_1002() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_display} ADD COLUMN layout_settings longtext");
  $ret[] = update_sql("ALTER TABLE {panels_pane} ADD COLUMN access varchar(128) AFTER type");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN css longtext AFTER css_id");
  return $ret;
}

// Create a field for the panel settings.
function panels_update_1003() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_display} ADD COLUMN panel_settings longtext");
  return $ret;
}

// Create a field for the panel settings.
// Renumbering to proper numbering scheme.
function panels_update_5204() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN name varchar(255) UNIQUE");
  $ret[] = update_sql("ALTER TABLE {panels_display} ADD COLUMN name varchar(255) UNIQUE");
  // Give all our panels a name.
  $ret[] = update_sql("UPDATE {panels_page} SET name = CONCAT('panel_page_', pid)");
  $ret[] = update_sql("UPDATE {panels_display} SET name = CONCAT('display_', did)");
  return $ret;
}

// Add the arguments field
function panels_update_5205() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN arguments longtext");
  return $ret;
}

// Add a field so that panes can remember their subtype so we can retrieve
// context information about it.
function panels_update_5206() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_pane} ADD COLUMN subtype varchar(64)");
  return $ret;
}

// Add fields for displays and extra contexts
function panels_update_5207() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN displays longtext");
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN contexts longtext");
  return $ret;
}

// Correct the mistaken {panels_display}_id when it should be {panels_display}_did
function panels_update_5208() {
  $ret = array();
  $count = db_result(db_query("SELECT MAX(did) FROM {panels_display}"));
  $ret[] = update_sql("DELETE FROM {sequences} WHERE name = '{panels_display}_did'");
  $ret[] = update_sql("DELETE FROM {sequences} WHERE name = '{panels_display}_id'");
  if ($count) {
    $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{panels_display}_did',
    $count)");
  }

  return $ret;
}

// Update argument, relationship and context code to be more correct.
function panels_update_5209() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {panels_page} ADD COLUMN relationships longtext");
  $result = db_query("SELECT * FROM {panels_page}");
  panels_load_include('plugins');

  while ($page = db_fetch_object($result)) {
    $args = unserialize($page->arguments);
    $arguments = $ids = $keywords = array();
    if (!empty($args)) {
      // Update each argument
      foreach ($args as $id => $argument) {
        $name = $argument['name'];
        $info = panels_get_argument($name);
        if (!$info) {
          continue;
        }
        // Make sure the id is valid
        if (empty($argument['id'])) {
          if (empty($ids[$name])) {
            $ids[$name] = 1;
          }
          else {
            $ids[$name]++;
          }

          $argument['id'] = $ids[$name];
        }

        // Give it an identifier if it doesn't already have one
        if (empty($argument['identifier'])) {
          $argument['identifier'] = $info['title'] . ($id > 1 ? ' ' . $id : '');
          error_log($argument['identifier']);
        }

        // Give it a unique keyword if it doesn't already have one
        if (empty($argument['keyword'])) {
          $keyword = $base = $info['keyword'];
          $count = 0;
          while (!empty($keywords[$keyword])) {
            $keyword = $base . '_' . ++$count;
          }
          $keywords[$keyword] = TRUE;
          $argument['keyword'] = $keyword;
          error_log($argument['keyword']);
        }
        $arguments[$id] = $argument;
      }
    }
    // Move old relationships (stored as contexts) to relationships, where
    // the belong
    $rels = unserialize($page->contexts);
    $relationships = $ids = array(); // Not resetting $keywords!
    if (!empty($rels)) {
      foreach ($rels as $id => $relationship) {
        $name = $relationship['name'];
        $info = panels_get_relationship($name);
        if (!$info) {
          continue;
        }
        // Make sure the id is valid
        if (empty($relationship['id'])) {
          if (empty($ids[$name])) {
            $ids[$name] = 1;
          }
          else {
            $ids[$name]++;
          }

          $relationship['id'] = $ids[$name];
        }

        // Give it an identifier if it doesn't already have one
        if (empty($relationship['identifier'])) {
          $relationship['identifier'] = $info['title'] . ($id > 1 ? ' ' . $id : '');
        }

        // Give it a unique keyword if it doesn't already have one
        if (empty($relationship['keyword'])) {
          $keyword = $base = $info['keyword'];
          $count = 0;
          while (!empty($keywords[$keyword])) {
            $keyword = $base . '_' . ++$count;
          }
          $keywords[$keyword] = TRUE;
          $relationship['keyword'] = $keyword;
        }
        $relationships[$id] = $relationship;
      }
    }
    db_query("UPDATE {panels_page} " .
      "SET arguments = '%s', " .
      "relationships = '%s', " .
      "contexts = '%s' " .
      "WHERE pid = $page->pid", serialize($arguments), serialize($relationships), serialize(array()), $page->pid
    );
  }
  return $ret;
}

function panels_update_5210() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 10 WHERE name = 'panels'");
  return $ret;
}

/**
 * Force a menu update
 */
function panels_update_5211() {
  menu_rebuild();
  return array();
}

/**
 * Add missing index on 'name' field.
 */
function panels_update_5212() {
  $ret = array();
  $ret[] = update_sql("CREATE INDEX {panels_page}_name_idx ON {panels_page} (name)");
  return $ret;
}

/**
 * Add a field to store pane caching information.
 */
function panels_update_5213() {
  $ret = array();
  switch($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {panels_pane} ADD COLUMN cache longtext AFTER configuration");
      $ret[] = update_sql("ALTER TABLE {panels_display} ADD COLUMN cache longtext AFTER panel_settings");
       break;
    case 'pgsql':
      db_add_column($ret, 'panels_pane', 'cache', 'text');
      db_add_column($ret, 'panels_display', 'cache', 'text');
  }
  return $ret;
}

/**
 * Create a new table for object caching. This isn't part of the cache
 * system.
 */
function panels_update_5214() {
  $ret = array();
  switch($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql(<<<EOT
        CREATE TABLE {panels_object_cache} (
          sid varchar(64),
          did integer,
          obj varchar(255),
          timestamp integer,
          data text,
          KEY (sid, obj, did),
          KEY (timestamp)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */
EOT
    );
    case 'pgsql':
  }
  return $ret;
}
