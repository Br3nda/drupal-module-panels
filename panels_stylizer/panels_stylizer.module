<?php
// $Id: panels_stylizer.module,v 1.1.2.5 2010/07/03 01:24:56 merlinofchaos Exp $

/**
 * @file
 * Panels stylizer module
 *
 * This module utlizes the CTools stylizer plugin to create custom styles
 * that can be used on panel panes and regions.
 *
 * The Stylizer tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.
 */

/**
 * Implementation of hook_perm()
 */
function panels_stylizer_perm() {
  return array(
    'administer panels styles',
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Inform CTools that panels_stylizer's style plugins are up-to-date.
 *
 * @param string $owner
 *   The system name of the module owning the API about which information is
 *   being requested.
 * @param string $api
 *   The name of the API about which information is being requested.
 */
function panels_stylizer_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels' && $api = 'styles') {
    return array('version' => 2.0);
  }
}

/**
 * Implementation of hook_theme()
 */
function panels_stylizer_theme() {
  ctools_include('stylizer');
  $theme = array();

  $plugins = ctools_get_style_bases();
  foreach ($plugins as $plugin) {
    if ($plugin['module'] == 'panels' && !empty($plugin['theme'])) {
      if ($plugin['type'] == 'region') {
        $theme[$plugin['theme']] = array(
          'arguments' => array('settings' => NULL, 'classes' => NULL, 'content' => NULL),
          'path' => $plugin['path'],
        );
      }
      else {
        $theme[$plugin['theme']] = array(
          'arguments' => array('settings' => NULL, 'content' => NULL, 'pane' => NULL, 'display' => NULL),
          'path' => $plugin['path'],
        );
      }

      // if no theme function exists, assume template.
      if (!function_exists("theme_$plugin[theme]")) {
        $theme[$plugin['theme']]['template'] = str_replace('_', '-', $plugin['theme']);
        $theme[$plugin['theme']]['file'] = $plugin['file']; // for preprocess.
      }
    }
  }

  return $theme;
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function panels_stylizer_ctools_plugin_directory($module, $plugin) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return;
  }
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

// -----------------------------------------------------------------------
// Database routines

/**
 * Create a new style with defaults appropriately set from schema.
 */
function panels_stylizer_new() {
  ctools_include('export');
  return ctools_export_new_object('panels_style');
}

/**
 * Load a single stylizer style.
 */
function panels_stylizer_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('panels_style', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Load all stylizer styles.
 */
function panels_stylizer_load_all() {
  ctools_include('export');
  return ctools_export_load_object('panels_style');
}

/**
 * Write a stylizer style the database.
 */
function panels_stylizer_save(&$style) {
  $update = (isset($style->sid)) ? array('sid') : array();
  drupal_write_record('panels_style', $style, $update);
  return $style;
}

/**
 * Remove a stylizer style.
 */
function panels_stylizer_delete($style) {
  db_query("DELETE FROM {panels_style} WHERE name = '%s'", $style->name);
}

/**
 * Export a stylizer style.
 */
function panels_stylizer_export($style, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('panels_style', $style, $indent);

  return $output;
}

function panels_stylizer_lipsum() {
  return "
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at velit dolor. Donec egestas tellus sit amet urna rhoncus adipiscing. Proin nec porttitor sem. Maecenas aliquam, purus nec tempus dignissim, nulla arcu aliquam diam, non tincidunt massa ante vel dolor. Aliquam sapien sapien, tincidunt id tristique at, pretium sagittis libero.</p>

    <p>Nulla facilisi. Curabitur lacinia, tellus sed tristique consequat, diam lorem scelerisque felis, at dictum purus augue facilisis lorem. Duis pharetra dignissim rutrum. Curabitur ac elit id dui dapibus tincidunt. Nulla eget sem quam, non eleifend eros. Cras porttitor tempus lectus ac scelerisque. Curabitur vehicula bibendum lorem, vitae ornare ligula venenatis ut.</p>
  ";
}

/**
 * Generate a preview given the current settings.
 */
function panels_stylizer_region_preview($plugin, $settings) {
  ctools_stylizer_add_css($plugin, $settings);
  return theme($plugin['theme'], $settings, ctools_stylizer_get_css_class($plugin, $settings), panels_stylizer_lipsum());
}

/**
 * Generate a preview given the current settings.
 */
function panels_stylizer_pane_preview($plugin, $settings) {
  ctools_stylizer_add_css($plugin, $settings);
  $pane = new stdClass();

  $content = new stdClass;
  $content->title = t('Lorem ipsum');
  $content->content = panels_stylizer_lipsum();
  $content->type = 'dummy';
  $content->subtype = 'dummy';

  $content->css_class = ctools_stylizer_get_css_class($plugin, $settings);

  $display = new panels_display();

  if (!empty($plugin['theme'])) {
    return theme($plugin['theme'], $settings, $content, $pane, $display);
  }
  else {
    return theme('panels_pane', $content, $pane, $display);
  }
}

/**
 * Add owner information to a style form.
 *
 * This allows Panels to add administrative info to a style for saving
 * it in the database.
 */
function panels_stylizer_edit_style_form(&$form, &$form_state) {
  $settings = $form_state['owner info']['owner settings'];

  $form['panels']['admin_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrative title'),
    '#description' => t('The name of this style. This will appear in the administrative interface to easily identify it.'),
    '#default_value' => $settings['admin_title'],
  );

  $form['panels']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name'),
    '#description' => t('The machine readable name of this page. It must be unique, and it must contain only alphanumeric characters and underscores. Once created, you will not be able to change this value!'),
    '#default_value' => $settings['name'],
  );

  if ($form_state['form_type'] != 'add') {
    $form['panels']['name']['#disabled'] = TRUE;
    $form['panels']['name']['#value'] = $settings['name'];
  }

  $form['panels']['admin_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Administrative description'),
    '#description' => t('A description of what this style is, does or is for, for administrative use.'),
    '#default_value' => $settings['admin_description'],
  );
}

function panels_stylizer_edit_style_form_validate(&$form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Next') || $form_state['clicked_button']['#value'] == t('Finish')) {
    if (empty($form_state['values']['admin_title'])) {
      form_error($form['panels']['admin_title'], t('You must choose an administrative title.'));
    }

    // If this is new, make sure the name is unique:
    if ($form_state['form_type'] == 'add') {
      if (empty($form_state['values']['name'])) {
        form_error($form['panels']['name'], t('You must choose a machine name.'));
      }

      $test = panels_stylizer_load($form_state['values']['name']);
      if ($test) {
        form_error($form['panels']['name'], t('That name is used by another style: @page', array('@page' => $test->admin_title)));
      }

      // Ensure name fits the rules:
      if (preg_match('/[^a-zA-Z0-9_]/', $form_state['values']['name'])) {
        form_error($form['panels']['name'], t('Name must be alphanumeric or underscores only.'));
      }
    }
  }
}

function panels_stylizer_edit_style_form_submit(&$form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Next') || $form_state['clicked_button']['#value'] == t('Finish')) {
    $form_state['owner info']['owner settings']['admin_title'] = $form_state['values']['admin_title'];
    $form_state['owner info']['owner settings']['admin_description'] = $form_state['values']['admin_description'];

    // Clean up preview files before we set the name
    ctools_stylizer_cleanup_style($form_state['plugin'], $form_state['settings']);

    $form_state['settings']['name'] = $form_state['values']['name'];
    $form_state['name'] = $form_state['values']['name'];
  }
}

/**
 * The form for determining if a pane should create a local style or a
 * preconfigured style.
 */
function panels_stylizer_edit_pane_style_form(&$form, &$form_state) {
  if (!user_access('administer panels styles')) {
    return;
  }

  panels_stylizer_edit_style_form($form, $form_state);
  $settings = $form_state['owner info']['owner settings'];

  // Add the checkbox, set the weight early
  $form['panels']['preconfigured'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make this style available to other regions or panes'),
    '#default_value' => $settings['name'],
    '#weight' => -1,
  );

  // Make the other form items dependent upon it.
  ctools_include('dependent');
  $depends = array(
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-preconfigured' => array(1)),
  );

  $form['panels']['name'] += $depends;
  $form['panels']['admin_title'] += $depends;
  $form['panels']['admin_description'] += $depends;

  // Add a revert button to get rid of an existing style.
  if ($form_state['form_type'] != 'add') {
    $form['buttons']['revert'] = array(
      '#type' => 'submit',
      '#value' => t('Choose a preconfigured style'),
    );
  }
}

/**
 * Validate to see if we need to check the preconfigured values.
 */
function panels_stylizer_edit_pane_style_form_validate(&$form, &$form_state) {
  if (!user_access('administer panels styles')) {
    return;
  }

  // Only validate if preconfigured is checked.
  if ($form_state['values']['preconfigured']) {
    panels_stylizer_edit_style_form_validate($form, $form_state);
  }
}

/**
 * Store the preconfigured values.
 */
function panels_stylizer_edit_pane_style_form_submit(&$form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Choose a preconfigured style')) {
    // If they chose to revert, get rid of these settings and go back to the
    // normal style settings page.
    $cache = &$form_state['owner info']['cache'];
    $conf = &$form_state['owner info']['conf'];

    $conf['style'] = '';
    if (isset($conf['settings'])) {
      unset($conf['settings']);
    }

    // $conf was a reference so it should just modify.
    panels_edit_cache_set($cache);

    $type = $form_state['owner info']['type'] == 'region' ? 'panel' : 'pane';
    $pid = $form_state['owner info']['pid'];

    ctools_include('display-edit', 'panels');
    panels_ajax_style_settings($type, $cache, $pid);
  }

  if (!user_access('administer panels styles')) {
    return;
  }

  // Only validate if preconfigured is checked.
  if ($form_state['values']['preconfigured']) {
    panels_stylizer_edit_style_form_submit($form, $form_state);
    $form_state['owner info']['owner settings']['preconfigured'] = $form_state['values']['preconfigured'];
  }
}
