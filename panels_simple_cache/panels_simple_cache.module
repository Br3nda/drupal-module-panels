<?php
// $Id: panels_simple_cache.module,v 1.1.2.4 2007/12/18 22:16:19 merlinofchaos Exp $
/**
 * @file panels_simple_cache.module
 *
 * Provides a simple time-based caching option for panel panes.
 */

/**
 * Implementation of hook_menu()
 */
function panels_simple_cache_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/panels/simple-cache',
      'title' => t('Simple cache'),
      'access' => user_access('access administration pages') && user_access('use panels caching features'),
      'type' => MENU_NORMAL_ITEM,
      'callback' => 'panels_simple_cache_admin',
      'description' => t('Information about Panels simple cache.'),
    );
    return $items;
  }
}

/**
 * Page callback for the very short admin page
 */
function panels_simple_cache_admin() {
  $output = '<p>';
  $output .= t('Panels simple cache does not have a normal administrative UI, such as panels pages or mini panels. With this module, you are given the option to add caching features to any panel display in panel pages, mini panels, panel nodes or any other displays provided by other modules or plugins. These options are available as an icon on each pane of the edit content pane.');
  $output .= '</p><p>';
  $output .= t('This module provides only very simple, time-based caching; it is not at all suitable if your content will change at all per user (and this can mean administrative additions that are just visible to you) as all users will see the same content; it is provided mostly as a reference implementation for other, smarter caching modules.');
  $output .= '</p>';
  return $output;
}

/**
 * Implementation of hook_panels_cache()
 */
function panels_simple_cache_panels_cache() {
  $cache['simple'] = array(
    'title' => t("Simple cache"),
    'description' => t('Simple caching is a time-based cache. This is a hard limit, and once cached it will remain that way until the time limit expires.'),
    'cache get' => 'panels_simple_cache_get_cache',
    'cache set' => 'panels_simple_cache_set_cache',
    'cache clear' => 'panels_simple_cache_clear_cache',
    'settings form' => 'panels_simple_cache_settings_form',
    'settings form submit' => 'panels_simple_cache_settings_form_submit',
  );
  return $cache;
}

/**
 * Get cached content
 */
function panels_simple_cache_get_cache($conf, $display, $args, $contexts, $pane = NULL) {
  $cid = panels_simple_cache_get_id($conf, $display, $args, $contexts, $pane);
  $cache = cache_get($cid, 'cache');
  if (!$cache) {
    return FALSE;
  }

  if ((time() - $cache->created) > $conf['lifetime']) {
    return FALSE;
  }

  return unserialize($cache->data);
}

/**
 * Set cached content
 */
function panels_simple_cache_set_cache($conf, $content, $display, $args, $contexts, $pane = NULL) {
  $cid = panels_simple_cache_get_id($conf, $display, $args, $contexts, $pane);
  cache_set($cid, 'cache', serialize($content));
}

/**
 * clear cached content. Cache clears are always for an entire display,
 * regardless of arguments.
 */
function panels_simple_cache_clear_cache($display) {
  $cid = 'panels_simple_cache';

  // This is used in case this is an in-code display, which means did will be something like 'new-1'.
  if (isset($display->owner) && isset($display->owner->id)) {
    $cid .= ':' . $display->owner->id;
  }
  $cid .= ':' . $display->did;

  cache_clear_all($cid, 'cache', TRUE);
}

/**
 * Figure out an id for our cache based upon input and settings.
 */
function panels_simple_cache_get_id($conf, $display, $args, $contexts, $pane) {
  $id = 'panels_simple_cache';

  // This is used in case this is an in-code display, which means did will be something like 'new-1'.
  if (isset($display->owner) && isset($display->owner->id)) {
    $id .= ':' . $display->owner->id;
  }
  $id .= ':' . $display->did;

  if ($pane) {
    $id .= ':' . $pane->pid;
  }

  if (user_access('view pane admin links')) {
    $id .= ':admin';
  }

  switch ($conf['granularity']) {
    case 'args':
      foreach ($args as $arg) {
        $id .= ':' . $arg;
      }
      break;
    case 'context':
      if (!is_array($contexts)) {
        $contexts = array($contexts);
      }
      foreach ($contexts as $context) {
        if (isset($context->argument)) {
          $id .= ':' . $context->argument;
        }
      }
  }
  return $id;
}

function panels_simple_cache_settings_form($conf, $display, $pid) {
  $options = array(
    '15' => t('15 seconds'),
    '30' => t('30 seconds'),
    '60' => t('1 minute'),
    '120' => t('2 minutes'),
    '180' => t('3 minutes'),
    '240' => t('4 minutes'),
    '300' => t('5 minutes'),
    '600' => t('10 minutes'),
    '900' => t('15 minutes'),
    '1200' => t('20 minutes'),
    '1800' => t('30 minutes'),
    '3600' => t('1 hour'),
    '7200' => t('2 hours'),
    '14400' => t('4 hours'),
    '28800' => t('8 hours'),
    '43200' => t('12 hours'),
    '86400' => t('1 day'),
    '172800' => t('2 days'),
    '259200' => t('3 days'),
    '335600' => t('4 days'),
    '594800' => t('1 week'),
  );

  $form['lifetime'] = array(
    '#title' => t('Lifetime'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $conf['lifetime'],
  );

  $form['granularity'] = array(
    '#title' => t('Granularity'),
    '#type' => t('select'),
    '#options' => array(
      'args' => t('Arguments'),
      'context' => t('Context'),
      'none' => t('None'),
    ),
    '#description' => t('If "arguments" are selected, this content will be cached per individual argument to the entire display; if "contexts" are selected, this content will be cached per unique context in the pane or display; if "neither" there will be only one cache for this pane.'),
  );

  return $form;
}

