<?php
// $Id: panels_page.module,v 1.5 2008/07/25 02:35:42 sdboyer Exp $


/**
 * @file panels_page.module
 *
 * This module is the primary implementation pf the Panels API.
 * It provides Panel pages that are used to create full page layouts.
 *
 * Code exclusively used on admin pages can be found in panels_page.admin.inc.
 */

/**
 * Bitvalues used to determine the status of the panels_page override at a given
 * path. @see panels_page_check_router_status() for details on how these are
 * implemented.
 *
 * Indicates that the menu router for a particular path exists. If this bitval
 * is set but none of the others are, it indicates that that router is 'owned'
 * by another module and has not been overridden by Panels.
 */
define('PANELS_ROUTER_EXISTS', 1);
/**
 * Indicates that the active router in the {menu_router} table is set and is
 * owned by Panels.
 */
define('PANELS_IS_PANELS_ROUTER', 1 << 1 | PANELS_ROUTER_EXISTS); // == 3
/**
 * Indicates that there is at least one 'fallback' router that Panels has stored
 * for this router item.
 */
define('PANELS_HAS_FALLBACK_ROUTER', 1 << 2 | PANELS_IS_PANELS_ROUTER); // == 7
/**
 * Indicates that the path is owned by a panels page admin editing router. This
 * should basically be a big "hands-off" sign.
 */
define('PANELS_IS_ADMIN_ROUTER', 1 << 3 | PANELS_IS_PANELS_ROUTER); // == 11

// These deal with a particular pid's relationship with a given path
/**
 * Panels display objects with this bitval set are an owner, although possibly
 * not the sole owner, of the router item at the provided path.
 */
define('PANELS_PID_OWNS_ROUTER', 1 << 4 | PANELS_IS_PANELS_ROUTER); // == 19
/**
 * Panels display objects with this bitval set are the sole owner of the router
 * item at the provided path.
 */
define('PANELS_IS_SOLE_OWNER', 1 << 5 | PANELS_PID_OWNS_ROUTER); // == 51


/**
 * Implementation of hook_help().
 */
function panels_page_help($section = '') {
  switch ($section) {
    case 'admin/panels/panel-page':
    case 'admin/panels/panel-page/list':
      $output = '<p>';
      $output .= t('You may peruse a list of your current panels layouts and edit them, or click add to create a new page.');
      $output .= '</p>';
      break;

    case 'admin/panels/panel-page/add':
      $output = '<p>';
      $output .= t('Choose a layout for your new page from the list below.');
      $output .= '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function panels_page_perm() {
  return array('create panel-pages', 'access all panel-pages');
}

/**
 * Implementation of hook_menu().
 *
 * Delegates to an .inc file to reduce code load overhead.
 */
function panels_page_menu() {
  require_once panels_load_include('panels_page.menu', 'panels_page/');
  return panels_page_construct_menu('menu');
}

/**
 * Implementation of hook_menu_alter().
 *
 * Delegates to an .inc file to reduce code load overhead.
 */
function panels_page_menu_alter() {
  require_once panels_load_include('panels_page.menu', 'panels_page/');
  return panels_page_construct_menu('menu_alter');
}

/**
 * Check the status of the menu router at $path.
 *
 * If $pid is provided, relationship of the panels_page identified by $pid
 * is also indicated.
 *
 * @param string $path
 * @param int $pid
 * @return int $status
 *   A bitval indicating all the router relevant status flags per the provided
 *   parameters.
 */
function panels_page_check_router_status($path, $pid = NULL) {
  $status = 0;
  
  // Find out if we're overriding a router on this path. (below is the manual query, saved just in case)
  // db_fetch_object(db_query("SELECT * FROM {menu_router} WHERE path LIKE (''%s'%%') AND path NOT LIKE (''%s'%%/%%')", $panel_page->path));
  // TODO put in a preg_replace() that strips out loader function names from the
  // path if they're provided. Essentially, beef up the str_replace() below.
  $router = menu_get_item(str_replace('%', '1', $path));
  if (empty($router)) { // No router at that path; return 0.
    return $status;
  }
  else {
    $status = $status | PANELS_ROUTER_EXISTS;
  }
  // TODO array_search() is a crude tool; improve this.
  if (array_search('panels_page_admin', $router['load_functions'])) {
    $status = PANELS_IS_ADMIN_ROUTER;
  }
  if (array_search('panels_page_render_load', $router['load_functions'])) {
    $status = PANELS_IS_PANELS_ROUTER;
    $panels_routers = panels_page_get_routers_by_path($path);
    foreach ($panels_routers as $key => $panels_router) {
      if (empty($panels_router['pid'])) {
        $status = $status | PANELS_HAS_FALLBACK_ROUTER;
        unset($panels_routers[$key]);
        continue;
      }
      if ($pid == $panels_router['pid']) {
        $status = $status | PANELS_PID_OWNS_ROUTER;
      }
    }
    if (count($panels_routers) == 1 && $status & PANELS_PID_OWNS_ROUTER) {
      $status = $status | PANELS_IS_SOLE_OWNER;
    }
  }
  return $status;
}

function panels_page_get_routers_by_path($path) {
  // Caching this in a static var may be a TOTAL waste of memory.
  static $routers = array();
  if (!isset($routers[$path])) {
    $routers[$path] = array();
    $result = db_query('SELECT * FROM {panels_page_menu_router} WHERE path = \'%s\'', $path);
    while ($row = db_fetch_array($result)) {
      $routers[$path][] = $row;
    }
  }
  return $routers[$path];
}

function panels_page_render_load($arg, $map, $index) {
  $args = func_get_args();
  array_splice($args, 1, 2);
  $number_parts = count($map);
}

/**
 * Determine if the specified user has access to a panel.
 */
function panels_page_access($panel_page, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  // Administrator privileges
  if (user_access('access all panel-pages', $account)) {
    return TRUE;
  }

  // All views with an empty access setting are available to all roles.
  if (!$panel_page->access || !is_array($panel_page->access)) {
    return TRUE;
  }

  // Otherwise, check roles
  static $roles = array();
  if (!isset($roles[$account->uid])) {
    $roles[$account->uid] = array_keys($account->roles);
    $roles[$account->uid][] = $account->uid ? DRUPAL_AUTHENTICATED_RID : DRUPAL_ANONYMOUS_RID;
  }

  return array_intersect($panel_page->access, $roles[$account->uid]);
}

/**
 * Get the title for a panel page, given a context.
 *
 */
function panels_page_get_title($panel_page, $context = 'page', $default_title = NULL) {
  $title = _panels_page_get_title($panel_page, $context, $default_title);
  if ($panel_page->keywords) {
    $title = strtr($title, $panel_page->keywords);
  }
  return $title;
}

function _panels_page_get_title($panel_page, $op, $default_title) {
  if ($op == 'menu-parent' && $panel_page->menu_parent_title) {
    return $panel_page->menu_parent_title;
  }

  if (in_array($op, array('menu', 'menu-parent')) && $panel_page->menu_title) {
    return $panel_page->menu_title;
  }

  // Context has the highest priority
  if ($panel_page->context) {
    $title = NULL;
    foreach ($panel_page->context as $context) {
      if (empty($context->data)) {
        // Empty contexts can't provide titles
        continue;
      }
      if ($page_title = $context->get_page_title()) {
        $title = $page_title;
      }
    }
    if ($title) {
      return $title;
    }
  }

  // If no context returned a title use the display title configured in layout
  // settings
  if ($panel_page->display->title) {
    return $panel_page->display->title;
  }

  // Fall back on the panel default title
  if ($panel_page->title) {
    return $panel_page->title;
  }

  if (is_null($default_title)) {
    return t('No title');
  }
  else {
    return $default_title;
  }
}

/**
 * Get the actual URL of a panel page given the passed in arguments.
 */
function panels_page_get_url($panel_page, $args = NULL) {
  if (!isset($args)) {
    $args = $panel_page->args;
  }

  $parts = explode('/', $panel_page->path);
  $url = array();
  foreach ($parts as $part) {
    if ($part == '%') {
      $url[] = array_shift($args);
    }
    else {
      $url[] = $part;
    }
  }
  return implode('/', array_merge($url, $args));
}

/**
 * Figure out if a panel is the current page; mostly useful in theming.
 */
function panels_page_get_current($panel_page = NULL) {
  static $cache = NULL;
  if (isset($panel_page )) {
    $cache = $panel_page;
  }

  return $cache;
}

// ---------------------------------------------------------------------------
// panel page administrative pages

/**
 * Settings for panel pages.
 */
function panels_page_settings() {
  panels_load_include('common');
  return drupal_get_form('panels_common_settings', 'panels_page');
}

/**
 * Pass-through to admin.inc.
 */
function panels_page_passthru() {
  $args = func_get_args();
  $callback = array_shift($args);

  panels_load_include('panels_page.admin', 'panels_page/');
  panels_load_include('plugins');
  return call_user_func_array($callback, $args);
}

function panels_move_menu_tabs($path, $tab) {
  global $_menu;

  // Get my menu item.
  $my_mid = menu_get_active_item();

  // Get my parent menu item.
  $my_parent = $_menu['items'][$my_mid]['pid'];

  // Check the existing children to see if there is a default local task
  // already.
  if (!isset($_menu['items'][$my_parent]['children'])) {
    $_menu['items'][$my_parent]['children'] = array();
  }
  $local_tasks = FALSE;

  if ($my_parent != 1) {
    // We do not run this loop if the parent is the top level menu item
    // since that way lies madness.
    foreach ($_menu['items'][$my_parent]['children'] as $child_mid) {
      if ($_menu['items'][$child_mid]['type'] & MENU_IS_LOCAL_TASK) {
        $local_tasks = TRUE;
        break;
      }
    }
  }

  if (!$local_tasks) {
    // Move the administrative items from the admin menu to here.
    $admin_item = $_menu['path index'][$path];
    $_menu['items'][$my_mid]['children'] = $_menu['items'][$admin_item]['children'];
  }
  else {
    // But if we do have tabs, just add the admin item itself to the tabs.
    // Get the menu item we want to move us to.
    $path .= $tab;
    $admin_item = $_menu['path index'][$path];

    $_menu['items'][$my_parent]['children'][] = $admin_item;
    $_menu['items'][$admin_item]['title'] = t('Edit panel');
    $_menu['items'][$admin_item]['weight'] += 50;
    $_menu['items'][$admin_item]['type'] = MENU_LOCAL_TASK;
  }
}

// ---------------------------------------------------------------------------
// view panels page

/**
 * Page callback to view a panel page.
 */
function panels_page_view_page($panel_page, $admin) {
  if (!is_object($panel_page)) {
    $panel_page = panels_page_load($panel_page);
  }
  if (!$panel_page) {
    return drupal_not_found();
  }

  panels_load_include('plugins');

  $switchers = panels_get_switchers();
  if ($switchers) {
    $list = array();
    $candidates = array();
    $result = db_query("SELECT name FROM {panels_page} WHERE switcher_name = '%s'", $panel_page->name);
    // get a list of all pages that might switch for this one
    while ($candidate = db_fetch_object($result)) {
      $list[] = $candidate->name;
    }
    // Add default panels that apply to the list as well
    foreach (panels_page_default_panels() as $page) {
      if ($page->switcher_name == $panel_page->name) {
        $candidates[$page->name] = $page;
      }
    }

    if ($list) {
      $candidates += (count($list) > 1) ? panels_page_load_all($list) : array(panels_page_load($list[0]));
    }

    if ($candidates) {
      // separate them based on switcher type
      $pages = array();
      foreach ($candidates as $candidate) {
        $pages[$candidate->switcher_type][$candidate->name] = $candidate;
      }

      // go through switcher types and switch the first one that matches.
      foreach ($pages as $plugin => $candidates) {
        if ($page = panels_switcher_switch($plugin, 'panel_page', $panel_page->name, $candidates)) {
          $panel_page = $page;
          break;
        }
      }
    }
  }

  $args = func_get_args();
  // remove the name.
  array_shift($args);
  // remove the admin flag.
  array_shift($args);

  $output = '';
  if ($admin) {
    // Display an admin form to make it easy to set up arguments.
    panels_load_include('panels_page.admin', 'panels_page/');
    $output .= drupal_get_form('panels_page_admin_view', $panel_page, $args);
  }
  else {
    // This piece of code goes deep into the menu system, finds the
    // administrative link for this panel and puts it between us and
    // whatever menu item is our parent. This causes the tabs to follow us
    // around without losing our previous menu context.
    panels_move_menu_tabs("admin/panels/panel-page/$panel_page->name", "/edit/general");
  }

  if (empty($panel_page->context)) {
    $panel_page->context = array();
  }

  if ($panel_page->arguments) {
    if (!panels_argument_load_contexts($panel_page->arguments, $panel_page->context, $args)) {
      if ($admin) {
        return $output . t('Page reports "Page not found" due to argument restrictions');
      }
      else {
        return drupal_not_found();
      }
    }
  }

  $panel_page->context = panels_context_load_contexts($panel_page, FALSE, $panel_page->context);
  $panel_page->keywords = panels_context_get_keywords($panel_page->context);

  // Figure out which display to use.
  $display_id = panels_argument_get_display($panel_page->arguments, $panel_page->context);

  $panel_page->display = $display = panels_page_fetch_display($panel_page, $display_id);

  // Figure out if these contexts include a form; will be NULL if there
  // isn't one, or the context if there is.
  $form = panels_context_get_form($panel_page->context);

  // This is the first point at which it is safe to add items to the display
  // as the argument handling, above, may choose which display is actually
  // used.
  $display->args     = $args;
  $display->context  = $panel_page->context;
  $display->keywords = $panel_page->keywords;
  $display->css_id   = $panel_page->css_id;
  $display->owner    = $panel_page;
  // unique id of this display's owner.
  $display->owner->id = $panel_page->name;
  $display->type = 'panel_page';

  // Set this as 'current' so that other stuff can utilize it.
  panels_page_get_current($panel_page);

  if ($form) {
    $form->form['#theme'] = 'panels_page_render_form';
    $form->form['#display'] = $display;
    $output .= drupal_render_form($form->form_id, $form->form);
  }
  else {
    $output .= panels_render_display($display);
  }

  // set title afterward to ensure title is retained.
  if ($output == NULL) {
    return drupal_not_found();
  }

  if (!$display->hide_title && $title = filter_xss_admin(panels_page_get_title($panel_page, 'page', ''))) {
    drupal_set_title($title);
  }
  else {
    drupal_set_title('');
  }

  if ($panel_page->css) {
    drupal_set_html_head("<style type=\"text/css\" media=\"all\">" . filter_xss_admin($panel_page->css) . "</style>\n");
  }
  if ($panel_page->no_blocks) {
    print theme('page', $output, FALSE);
  }
  else {
    return $output;
  }
}

/**
 * Theme function to render our panel as a form.
 *
 * We need to do this so that the entire display is inside the form.
 */
function theme_panels_page_render_form($form) {
  $form['#children'] = panels_render_display($form['#display']);
  return theme('form', $form);
}

/**
 * Load a display based upon information from the $displays list.
 */
function panels_page_fetch_display(&$panel_page, $id = NULL) {
  $did = NULL;
  if (empty($id)) {
    // If empty, use the default display.
    if (empty($panel_page->display)) {
      // Load it if not already loaded
      $panel_page->display = $display = panels_load_display($panel_page->did);
    }
    else {
      // Otherwise, use the loaded display
      $display = $panel_page->display;
    }
  }
  else {
    // Otherwise, fetch from our alternative displays.
    $panel_page->display = $display = _panels_page_fetch_display($panel_page, $id);
  }

  $display->owner = $panel_page;
  $display->owner->id = $name;
  return $display;
}

/**
 * Fetch a display from a panel pages alternative list of displays.
 */
function _panels_page_fetch_display(&$panel_page, $id) {
  $info = $panel_page->displays[$id];
  if ($display = _panels_fetch_display_from_info($info)) {
    return $display;
  }

  // At this point the display does not yet exist, which means we need to
  // create one and save the panel page to reflect this.
  if (!empty($info['default'])) {
    $display = _panels_fetch_display_from_info($panel_page->displays[$info['default']]);
    if (empty($display)) {
      // Use the default display.
      if (empty($panel_page->display)) {
        // Load it if not already loaded
        $panel_page->display = $display = panels_load_display($panel_page->did);
      }
      else {
        // Otherwise, use the loaded display
        $display = $panel_page->display;
      }
    }
  }

  // Make a copy of the display; using the export forces all the IDs properly,
  // since we don't want this to actually *be* the original display.
  $code = panels_export_display($display);
  eval($code);

  return $display;
}

/**
 * Get a display based on whether it's already in code or needs to be loaded.
 */
function _panels_fetch_display_from_info($info) {
  // If the 'display' is set it's the result of an export/default
  if (isset($info['display'])) {
    return $info['display'];
  }

  if (is_numeric($info['did'])) {
    return panels_load_display($info['did']);
  }

  return FALSE;
}

/**
 * Check to see if the panel page needs to be saved due to a display having
 * been just saved.
 */
function panels_page_set_display($panel_page, $id, $display) {
  $save = FALSE;
  if ($panel_page->pid == 'new') {
    $save = TRUE;

    if (empty($id)) {
      $panel_page->display = $display;
      $panel_page->did = $display->did;
    }
  }

  if (!empty($id)) {
    if (empty($panel_page->displays[$id]['did']) || $panel_page->displays[$id]['did'] == 'new') {
      $save = TRUE;
      $panel_page->displays[$id]['did'] = $display->did;
      if (isset($panel_page->displays[$id]['display'])) {
        unset($panel_page->displays[$id]['display']);
      }
    }
  }

  if ($save) {
    panels_page_save($panel_page);
  }
}

// ---------------------------------------------------------------------------
// Database functions

/**
 * Fetch all panel pages in the system.
 *
 * This function does not cache.
 */
function panels_page_load_all($names = array(), $page_size = 0) {
  $pages = $dids = array();
  $query = "SELECT * FROM {panels_page}";

  if ($names) {
    $query .= " WHERE name IN (" . implode(', ', array_fill(0, sizeof($names), "'%s'")) . ")";
  }

  if ($page_size) {
    $result = pager_query($query, $page_size, 0, $names);
  }
  else {
    $result = db_query($query, $names);
  }

  while ($page = db_fetch_object($result)) {
    $page->access = ($page->access ? explode(', ', $page->access) : array());
    $page->arguments = (!empty($page->arguments)) ? unserialize($page->arguments) : array();
    $page->displays = (!empty($page->displays)) ? unserialize($page->displays) : array();
    $page->contexts = (!empty($page->contexts)) ? unserialize($page->contexts) : array();
    $page->relationships = (!empty($page->relationships)) ? unserialize($page->relationships) : array();
    $page->switcher_options = (!empty($page->switcher_options)) ? unserialize($page->switcher_options) : array();

    $page->type = t('Local');
    $pages[$page->name] = panels_page_sanitize($page);
  }

  $status = variable_get('panel_page_defaults', array());
  foreach (panels_page_default_panels() as $page) {
    // Determine if default panel is enabled or disabled.
    if (isset($status[$page->name])) {
      $page->disabled = $status[$page->name];
    }

    if (!empty($pages[$page->name])) {
      $pages[$page->name]->type = t('Overridden');
    }
    else {
      $page->type = t('Default');
      $pages[$page->name] = $page;
    }
  }
  return $pages;
}

/**
 * Load a panel page.
 */
function panels_page_load($pid, $load_display = FALSE) {
  static $cache = array();

  if (array_key_exists($pid, $cache)) {
    return $cache[$pid];
  }

  if (!is_numeric($pid)) {
    $where = "name = '%s'";
  }
  else {
    $where = 'pid = %d';
  }
  $page = db_fetch_object(db_query("SELECT * FROM {panels_page} WHERE $where", $pid));
  if (!$page) {
    $defaults = panels_page_default_panels();
    if (isset($defaults[$pid])) {
      $page = $cache[$pid] = $defaults[$pid];
      return $page;
    }
    return;
  }

  $page->access = ($page->access ? explode(', ', $page->access) : array());
  $page->arguments = (!empty($page->arguments)) ? unserialize($page->arguments) : array();
  $page->displays = (!empty($page->displays)) ? unserialize($page->displays) : array();
  $page->contexts = (!empty($page->contexts)) ? unserialize($page->contexts) : array();
  $page->relationships = (!empty($page->relationships)) ? unserialize($page->relationships) : array();
  $page->switcher_options = (!empty($page->switcher_options)) ? unserialize($page->switcher_options) : array();

  $cache[$pid] = panels_page_sanitize($page);

  if ($load_display) {
    $cache[$pid]->display = panels_load_display($cache[$pid]->did);
  }

  return $cache[$pid];
}

/**
 * A list of the fields used in the panel_page table.
 */
function panels_page_fields() {
  return array(
    "name" => "'%s'",
    "title" => "'%s'",
    "arguments" => "'%s'",
    "displays" => "'%s'",
    "contexts" => "'%s'",
    "relationships" => "'%s'",
    "access" => "'%s'",
    "path" => "'%s'",
    "css_id" => "'%s'",
    "css" => "'%s'",
    "no_blocks" => "%d",
    "switcher_type" => "'%s'",
    "switcher_name" => "'%s'",
    "switcher_options" => "'%s'",
    "menu" => "%d",
    "menu_tab" => "%d",
    "menu_tab_weight" => "%d",
    "menu_title" => "'%s'",
    "menu_tab_default" => "%d",
    "menu_tab_default_parent_type" => "'%s'",
    "menu_parent_title" => "'%s'",
    "menu_parent_tab_weight" => "%d",
  );
}

/**
 * Sanitize a panel prior to saving it.
 */
function panels_page_sanitize($page) {
  foreach (array('arguments', 'displays', 'contexts', 'relationships', 'switcher_options') as $id) {
    if (!is_array($page->$id)) {
      $page->$id = array();
    }
  }

  return $page;
}

/**
 * Save a panel page.
 */
function panels_page_save($panel_page) {
  $fields = $types = $values = $pairs = array();
  // Save the display if one was given to us.
  if (!empty($panel_page->display)) {
    $display = panels_save_display($panel_page->display);
  }
  // Ensure empty values get translated correctly. Also make sure we don't
  // mess up the original.
  $page_clone = drupal_clone(panels_page_sanitize($panel_page));

  // Check to see if we need to save any imported displays.
  foreach ($page_clone->displays as $did => $info) {
    if (isset($info['display'])) {
      $d = panels_save_display($info['display']);
      $page_clone->displays[$did]['did'] = $d->did;
      unset($page_clone->displays[$did]['display']);
    }
  }

  // If pid is set to our "magic value", this is an insert, otherwise an update.
  $insert = $page_clone->pid && $page_clone->pid == 'new';

  // Serialize the access string.
  $page_clone->access = $page_clone->access ? implode(', ', $page_clone->access) : '';

  // Build arrays of fields and types (resp. pairs of both) and of values.
  foreach (panels_page_fields() as $field => $type) {
    // Skip empty values.
    if (isset($page_clone->$field)) {
      if ($insert) {
        $fields[] = $field;
        $types[] = $type;
      }
      else {
        $pairs[] = "$field = $type";
      }
      // Build the $values array, serializing some fields.
      $serialize = in_array($field, array('arguments', 'displays', 'contexts', 'relationships', 'switcher_options'));
      $values[] = $serialize ? serialize($page_clone->$field) : $page_clone->$field;
    }
  }

  if ($insert) {
    // Determine the new primary key.
    $page_clone->pid = db_next_id('{panels_page}_pid');
    // Build the query adding the new primary key and the did.
    $sql = 'INSERT INTO {panels_page} (' . implode(', ', $fields) . ', did, pid) VALUES (' . implode(', ', $types) . ', %d, %d)';
    $values[] = $display->did;
  }
  else {
    // Build the query filtering by the primary key.
    $sql = 'UPDATE {panels_page} SET ' . implode(', ', $pairs) . ' WHERE pid = %d';
  }
  $values[] = $page_clone->pid;

  db_query($sql, $values);
  menu_rebuild();
  return $page_clone->pid;
}

/**
 * Delete a panel page and its associated displays.
 */
function panels_page_delete($panel_page) {
  // Delete the panel page.
  db_query("DELETE FROM {panels_page} WHERE pid = %d", $panel_page->pid);
  menu_rebuild();

  // Delete the primary display.
  panels_delete_display($panel_page->did);

  // Delete all secondary displays.
  if (!empty($panel_page->displays)) {
    foreach ($panel_page->displays as $info) {
      if ($info['did'] !== 'new') {
        panels_delete_display($info['did']);
      }
    }
  }
}

/**
 * Export a panel page into PHP code for use in import.
 *
 * The code returned from can be used directly in panels_page_save().
 */
function panels_page_export($panel_page, $prefix = '') {
  $output = '';
  $fields = panels_page_fields();
  $output .= $prefix . '$page = new stdClass()' . ";\n";
  $output .= $prefix . '$page->pid = \'new\'' . ";\n";
  foreach ($fields as $field => $q) {
    if ($field == 'displays') {
      continue;
    }

    $output .= $prefix . '  $page->' . $field . ' = ' . panels_var_export($panel_page->$field, '  ') . ";\n";
  }
  // Export the primary display
  $display = !empty($panel_page->display) ? $panel_page->display : panels_load_display($panel_page->did);
  $output .= panels_export_display($display, $prefix);
  $output .= $prefix . '$page->display = $display' . ";\n";

  // Export all secondary displays
  $output .= $prefix . '$page->displays = array()' . ";\n";
  foreach ($panel_page->displays as $did => $info) {
    $output .= $prefix . '  $page->displays[\'' . $did . "']['title'] = '" . check_plain($info['title']) . "';\n";
    $output .= $prefix . '  $page->displays[\'' . $did . "']['argument_id'] = '" . check_plain($info['argument_id']) . "';\n";
    $display = !empty($info['display']) ? $info['display'] : panels_load_display($info['did']);
    $output .= panels_export_display($display, $prefix . '    ');
    $output .= $prefix . '  $page->displays[\'' . $did . "']['display'] =  \$display;\n";
  }
  return $output;
}

/**
 * Get all 'default' panels.
 */
function panels_page_default_panels() {
  $panels = module_invoke_all('default_panel_pages');
  if (!is_array($panels)) {
    $panels = array();
  }

  return $panels;
}

/**
 * Implementation of hook_panels_exportables().
 */
function panels_page_panels_exportables($op = 'list', $panels = NULL, $name = 'foo') {
  static $all_panels = NULL;
  if ($op == 'list') {
    if (empty($all_panels)) {
      $all_panels = panels_page_load_all();
    }

    foreach ($all_panels as $name => $panel) {
      $return[$name] = check_plain($name) . ' (' . check_plain(panels_page_get_title($panel)) . ')';
    }
    return $return;
  }

  if ($op == 'export') {
    $code = "/**\n";
    $code .= " * Implementation of hook_default_panel_pages()\n";
    $code .= " */\n";
    $code .= "function " . $name . "_default_panel_pages() {\n";
    foreach ($panels as $panel => $truth) {
      $code .= panels_page_export($all_panels[$panel], '  ');
      $code .= '  $pages[\'' . check_plain($panel) . '\'] = $page;' . "\n\n\n";
    }
    $code .= "  return \$pages;\n";
    $code .= "}\n";
    return $code;
  }
}

